/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 17.02.2021 21:59:34

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 2032;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,697 } };
const TfArray<1, float> quant0_scale = { 1, { 0.03497619554400444, } };
const TfArray<1, int> quant0_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 374, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[18] = { -118, -54, -84, -36, -33, -118, -93, -52, -61, -38, -50, -112, -47, -126, -43, -127, -95, -24, };
const TfArray<1, int> tensor_dimension2 = { 1, { 18 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0075634871609508991, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[34] = { -71, -25, 37, -39, 123, -41, 11, -103, -18, -90, -61, 35, -3, 8, -32, -127, -35, -41, 76, -35, -109, 55, -27, -15, -36, -43, 29, 16, -40, -101, -36, -32, -80, 78, };
const TfArray<1, int> tensor_dimension3 = { 1, { 34 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0028607579879462719, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[12] = { -655, -1345, 735, -875, -1115, -283, -1596, 798, 1220, -1882, 4713, 1340, };
const TfArray<1, int> tensor_dimension4 = { 1, { 12 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00017372032743878663, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[12*374] = { 
  3, -7, -28, -14, 13, 20, 21, -5, 20, -35, -40, 7, -21, 1, -58, 13, -32, 2, 6, -88, -13, 15, -2, 3, 13, 12, 2, -7, -21, 21, -1, -38, -5, -1, 12, -3, -31, -8, 23, -14, -2, -36, 5, 6, -14, -10, -13, -3, -5, 11, -16, 1, 19, -67, -19, 15, -2, 7, -2, -7, 5, -10, -22, 1, 6, -20, -12, -8, 8, -17, -27, 19, 17, -35, -24, -33, 1, 8, 15, -4, 15, -2, 16, 6, 2, 7, 21, -22, 9, 2, 6, -6, 3, -12, -1, -31, -25, -14, 7, 6, -26, 0, 12, -13, -25, 12, 16, -44, -35, -23, 5, 12, 17, 13, 28, -4, 27, 12, 10, 12, 16, 20, 4, 17, -3, 2, 2, -36, 0, -34, -4, -19, -16, 22, -39, -4, 16, -14, -2, 17, 10, -36, -66, -18, 15, 16, 20, 7, 25, 9, 27, 10, 13, 5, 19, 16, 7, 5, -13, -5, -26, -46, -15, -38, -12, -34, -39, 20, -42, -15, 9, -4, 7, 16, 1, -60, -50, -28, 10, 22, 24, 12, 26, 2, 40, 4, 17, 15, 22, 18, 13, 13, -17, -11, -45, -46, -4, -34, -14, -40, -49, 20, -68, -12, 4, -33, 3, 25, -3, -36, -21, -45, -10, 26, 19, 10, 26, -23, 31, 16, 27, 3, 12, 19, 18, -4, -41, -32, -20, -28, -7, -14, -17, -58, -34, 26, -45, 7, -4, -30, 6, 3, 3, -8, 4, -24, -5, 36, 12, 5, 26, -55, 38, -10, 23, 20, 23, 11, 21, -12, -27, -37, -2, -29, -24, -9, -19, -59, -32, 32, -38, -9, -3, -29, -7, -4, -7, 6, 4, -5, 18, 25, 16, -4, 17, -66, 34, -31, 26, 11, -4, 12, 19, -16, -20, -31, 9, -32, -15, -9, -6, -71, -30, 46, -47, -3, 3, -33, -6, -23, 1, 15, 9, 0, 12, 22, 4, 5, 13, -60, 44, -14, 27, -2, 14, 9, 10, -48, -36, -14, 2, -41, -17, 6, -13, -79, -29, 29, -40, -34, 10, -31, -27, -48, 0, 11, 12, -4, 16, -19, 0, 1, 5, -44, 1, 8, 23, 22, 17, 4, 0, -54, -26, -2, 12, -43, -16, 24, -3, -49, -52, 23, -36, -20, 
  14, -6, -39, 13, -62, 26, -3, 20, 15, 23, 17, -13, -4, -74, -11, 10, 13, -50, -41, 10, 16, -76, -8, -10, 22, -14, -13, -26, 24, -17, -9, -25, -4, -82, 13, -21, -27, 10, -41, 23, 3, 15, 9, 17, 7, -9, -19, -53, -18, 8, -1, 5, -26, 15, 8, -45, -14, -9, 18, 21, -34, 7, 13, 5, 3, -5, 36, -23, 6, -40, 5, 3, -25, 16, -19, 8, 23, 13, 16, -12, -7, -36, -15, -5, -4, 13, -27, 9, 11, -13, 4, -19, 3, 10, -12, 20, -2, 9, 9, -5, 23, 12, -4, -26, 11, -30, -15, 19, -20, 17, 0, 17, 4, -1, -12, -15, -14, 4, 5, 15, -26, 15, 2, 2, 10, -19, 1, 13, 11, 8, -34, 12, -1, 0, 9, 8, -15, 2, -1, -23, -17, 5, 18, -6, -6, 1, -13, 2, -46, -8, -22, 2, -5, 16, -26, -1, -6, -2, 17, -22, 8, 14, 7, 9, -19, 15, 15, -3, 21, -7, -8, 9, 0, -12, 8, 1, 32, 34, 23, 3, -10, 11, 7, 8, -19, 7, -7, 11, -22, 3, -3, 4, 8, -10, -6, 17, 5, -8, -3, 17, 9, -9, 15, 6, 0, 9, -11, 5, -11, 10, -3, 20, 17, 7, -13, 12, 26, 13, -2, -20, -8, 25, -41, -23, -7, 7, 17, 3, -21, 15, 12, -13, 16, 29, 15, -9, 2, -2, -1, 2, -10, -8, 1, -5, -3, 14, 4, -2, -11, 18, 22, -3, -24, -17, -8, 28, -35, -16, 19, -2, 24, -4, -17, 2, 13, -13, 11, 38, 10, -40, -20, -10, -9, -6, -15, -2, 5, -6, -4, 10, 18, 13, -13, 10, 21, -3, -22, 31, -2, 40, -48, -13, 0, 12, 18, -3, -19, -21, 13, -28, 6, 23, 7, -49, 1, 1, -19, -14, -2, 12, 10, -10, -13, -2, 5, 16, -40, 20, 22, -5, -25, -2, -17, 10, -25, -16, -12, -20, 10, -25, -10, 6, 17, -20, -4, 19, 22, -5, 21, 13, -23, -26, 4, 6, -8, -6, -23, -7, -2, 3, -36, 12, 28, -16, -13, 20, -27, -12, -31, 7, 13, -32, 2, -12, -16, -6, 7, -36, 12, 9, 1, -18, -6, 23, 
  3, 8, -23, 15, 18, 3, -3, -3, 9, -2, 11, 23, 24, 14, -34, -12, -2, -35, 23, 11, -12, 22, -23, 23, -75, -8, 6, 7, -44, -55, -73, -40, -31, 11, 6, 13, 1, 23, 29, 1, 4, -1, -1, 4, -4, 18, 23, 12, -27, -6, -21, -33, 15, 4, -16, 7, 4, 18, -39, -29, 13, 10, 23, -50, -15, -31, -31, 17, 2, 19, -4, -13, 19, -11, -8, -6, -10, 0, 5, 20, 3, 6, -34, -10, -33, -21, 14, 12, -9, 8, 3, -5, -20, -19, 12, 19, 32, -48, -13, -31, 6, 16, -3, 16, 2, -54, 17, -13, -13, -14, -27, 6, -5, -8, -15, 3, -34, -6, -25, -18, 19, 5, -31, 19, 3, 4, -24, -5, -1, 20, 41, -32, -25, -29, -7, 26, -5, 9, 11, -42, 19, -46, -41, -56, -33, -15, -56, -23, -38, 6, -25, 3, -19, -42, 24, -11, -31, 21, 3, -12, 21, 10, -10, 13, 40, -20, 1, -18, 7, 16, -16, 17, -14, -18, 31, -27, -12, -38, -27, -38, -50, -37, -38, -5, -20, 2, -22, -33, 26, -8, -4, 36, -20, -13, 17, -5, -28, 8, 53, -23, -5, -4, 0, 12, -25, 12, 0, 0, 14, -17, -32, -44, -45, -45, -52, -55, -29, -6, -24, -2, -18, -27, 21, -7, -8, 26, 5, -23, 16, -3, 5, 0, 41, -30, 11, -6, -19, 17, -13, 14, -21, -3, 22, -8, -24, 1, -22, -10, -13, -6, 7, -13, -20, -9, -34, -24, 21, -29, 14, 9, 21, -21, 13, -21, 12, -15, 27, -27, 11, -35, -26, 5, 10, 14, -18, 27, 11, -6, -8, -24, -12, -11, -10, 12, 24, -2, -13, 9, -46, -22, -4, -19, 24, 6, 25, -17, 15, -28, 20, -13, 28, -32, 26, -36, -33, 4, 13, 14, -23, 23, 10, 9, 1, -21, -18, -4, -16, 21, 38, 16, 26, -16, -29, -2, -17, -24, 27, 31, 27, -19, 14, -51, 8, -18, 19, 6, 31, -16, -42, 9, -3, 23, 8, 25, 0, 3, -4, -36, -35, -6, 14, -14, -7, 19, 27, -2, -29, 14, -9, -19, 15, 44, 30, -7, 13, -39, 15, -12, 33, 5, 29, 4, -37, 29, 
  13, 23, -45, 15, -13, 1, -14, 26, 5, 33, 26, 11, 16, 0, 6, 16, 30, -4, -24, 0, 18, -24, 4, 16, -38, -41, -15, -18, -31, -14, -39, -2, -21, -23, 13, 13, -31, 1, -40, 13, -21, 14, -8, 22, 12, 9, 6, 9, -4, 14, 6, -18, -24, 23, 15, -13, -11, 16, -37, -3, -12, -30, -24, -9, -8, 6, 23, -6, 5, 9, 16, -19, -53, 12, -28, 13, -23, 15, 21, 0, -3, -3, -8, 2, 12, -34, -19, 19, 13, -25, -18, 7, 13, 15, -39, 27, -13, -3, 13, 8, 21, 3, 6, -1, 22, -15, -55, 6, -33, 11, -22, 9, 10, -6, 1, -2, 1, 11, 9, -39, -38, 30, 6, -53, -38, 16, 9, 13, -65, 12, -3, 11, 2, 9, 12, 18, 13, -13, 19, -22, -51, 9, -17, 30, -21, 10, 10, -13, -16, 3, -6, 9, 5, -42, -18, 11, 12, -32, -52, 8, 1, 16, -65, 6, -20, 11, 16, 6, 17, 9, 8, -24, 12, -37, -46, -3, -35, 30, -19, 14, 19, -13, -24, 11, -2, 6, 2, -51, -16, 9, 0, -37, -48, 13, 9, 11, -50, -10, -35, 12, 4, 6, 19, 6, 5, -13, 16, -29, -34, 10, -15, 22, -32, 8, 4, -36, -55, -5, -5, 18, 4, -28, -10, 17, -11, -15, -26, 14, 12, 18, -35, -1, -27, 18, 12, 11, 22, 4, 5, -13, 8, -7, -35, -11, 2, -1, -48, 16, -11, -35, -58, -11, -22, 28, -4, -51, -22, 15, 4, -29, -5, 7, 17, 22, -38, -7, -11, 22, 13, 4, 32, 8, -17, -7, 8, 10, -47, -16, -7, -34, -56, -22, -49, -33, -63, 2, -23, 20, 2, -37, -34, 13, -19, -20, -7, -4, 4, 29, -20, 6, -10, 15, 9, 26, 23, 7, -35, -4, 26, 15, -76, -9, 5, -25, -43, -62, -46, -29, -68, -4, -34, 9, 7, -22, -50, 13, -38, -25, -8, -15, -7, 28, -22, -1, -12, 27, 13, 16, 21, 8, -16, 9, 17, 16, -46, 1, 1, -1, -26, -84, -24, -37, -39, 20, -26, -16, 13, -9, -22, -7, -71, -33, 10, 5, -23, 20, -3, 11, -11, 2, 17, -2, 30, 4, 
  -12, -1, 31, -4, 10, 8, 6, 20, 16, -37, -29, 9, -5, 4, -36, -46, -36, -16, 4, 21, -38, -17, 1, 20, -6, 24, 18, 34, -26, 9, 12, 17, -15, 30, -31, 3, 23, 10, -9, 0, 19, -4, 6, -48, -50, 8, 3, -14, -50, -33, 18, -22, -19, 22, -5, -22, -17, -4, 5, 19, 10, 30, -18, -4, 14, 20, 11, 17, -44, -1, 17, -6, -25, 6, 35, -6, -10, -3, -37, -4, -6, -36, -12, -10, 25, -1, -46, 22, 8, -34, -9, -18, -1, 9, 13, 34, -1, -14, 8, 16, 8, 16, -52, -9, 28, -11, -27, 5, 32, -30, -1, 1, -25, 12, 0, -21, 8, 1, 34, 3, -42, 19, 10, -18, -15, -9, -5, 10, 12, 25, -7, -10, -5, 15, 5, 17, -46, 2, -4, -16, -41, -21, 3, -6, -50, 5, -7, 12, 12, -5, 21, 6, 24, 1, -28, 7, 19, -5, -17, 7, -7, 22, -17, 17, -38, -7, 12, 16, 12, -4, -80, 14, -5, -34, -29, -63, -14, 0, -26, 14, -1, 4, 16, 7, 15, 0, 40, 0, -21, 8, 17, 2, -18, 3, -30, 9, -26, 7, -18, -11, 1, 25, 4, -8, -39, 17, -15, -16, -28, -9, -8, 20, -17, 4, -5, 7, -6, 14, -5, -9, 37, -19, -28, 9, 2, 12, -16, 6, -4, 22, -19, 15, -5, -15, -7, 10, -9, 2, -21, 16, -20, -4, -26, 5, -8, 29, -15, -2, -11, -1, -23, 4, 10, -6, 33, -6, -10, -7, 13, 17, 7, 12, 4, 22, -29, 10, -18, 7, -6, 22, 7, -2, -23, 18, -4, -14, -37, -4, -4, 18, -5, -13, -23, -11, -21, 21, 3, -24, 38, 23, -11, 4, 13, 40, 25, 12, -1, 36, -40, -7, -1, 19, 14, 35, 0, 7, -15, 16, -4, 5, -39, 5, 3, 17, -2, 3, -15, -19, -36, 29, 3, -5, 41, 34, -10, 17, 25, 29, 12, 22, -2, 16, -25, -8, -23, 17, -16, 40, -7, -24, 3, 17, -17, -10, -27, 0, 4, 17, 7, 13, -11, -27, -33, 28, 11, -2, 51, 53, 13, -26, 1, 5, 23, 16, -20, 10, -33, -40, -15, 3, -10, 44, 10, -60, 
  -12, -21, -32, 13, 17, 29, 25, 9, 32, 8, -29, 12, 27, -40, 43, -50, 12, 17, -3, -32, -22, 7, -46, -28, 9, -5, -57, -24, -73, 26, -11, 34, 13, 18, -6, -33, 10, 23, 4, 15, 6, 9, 30, 17, -17, 19, 21, -22, 32, -55, 1, 12, -5, -34, -18, 14, -3, -44, -33, -1, 4, -23, -58, 14, 9, 33, 23, 11, 5, -20, 22, 14, -17, 1, -15, -2, 21, 14, -3, 5, 25, -26, 22, -45, -17, 19, -44, -24, -16, 16, 7, -48, -18, -9, 3, -12, -33, 8, 13, 16, 16, 14, 0, -18, 21, 15, -3, 18, 21, -23, 23, -6, -5, 17, 22, -18, 25, -75, -27, 15, -20, -15, -23, 12, 12, -22, -34, -10, 15, 1, -35, 13, -1, 12, -2, 9, 5, -35, 15, 26, -17, 32, 24, -4, 11, -8, 6, 11, 10, -8, 22, -57, -17, 17, -25, -20, 11, 14, 17, -15, -34, 2, 6, 11, -50, 17, 13, 15, -11, 8, 7, -37, 11, 0, -3, 22, 11, 4, 8, -6, 0, 4, -1, -3, 20, -35, -12, 10, -13, -20, 20, 10, -3, 5, -11, -2, 11, 14, -30, 17, -4, 6, -22, -5, 0, -29, 8, -16, -2, 26, 8, 14, 13, -11, 3, 7, -17, -2, -9, -12, -8, 23, 17, -9, -2, 4, 8, 9, -4, -16, 20, 13, -41, 34, -3, -3, -43, 1, -6, -25, 23, -37, 8, 9, -3, 12, 15, -27, 3, 15, 0, -6, -36, -32, -17, 1, 4, 1, 5, -2, 1, 9, -10, -31, -1, 2, -40, 3, -31, -8, -56, -17, -12, -12, -41, -51, 18, 7, 0, 11, 16, -38, -12, 10, -15, 9, -33, -9, -24, -62, 23, -13, -12, 1, -30, 9, -1, -69, -36, -8, -22, -41, -45, -51, -50, -21, -9, -16, -40, -40, 14, 14, 4, 6, 13, -40, -40, 13, -13, 24, -27, -7, -30, -31, 18, -24, -50, -12, -41, 0, 2, -56, -36, -18, -36, -22, -54, -52, -44, -35, 1, -19, -38, -31, 25, 10, 6, 11, 14, -76, -46, 10, 6, 22, -37, -25, -58, -42, 36, -31, -44, -1, -56, 15, -16, -54, -13, -10, -6, -23, -34, -47, -48, -24, 
  -58, 26, -22, -4, -37, -9, 8, -27, -53, -51, -44, -77, -28, 13, 22, 2, 12, 10, -35, -23, 4, 17, 21, -11, 20, 19, -3, 2, 16, 2, 4, -17, 4, 2, -26, 26, -31, -6, -36, -34, 21, -46, -63, -9, -9, -40, -17, 5, 21, 7, 20, 0, -38, -12, -2, 4, 7, -18, 11, 10, -12, -4, -12, 6, 3, -1, 26, -5, -9, 24, -30, 5, -26, -23, -9, -59, -60, -2, -7, -32, -23, -8, 19, 3, 12, 1, -14, 3, 5, 2, 2, -19, 28, 13, -15, 2, 15, 5, 8, -1, 27, -17, -11, 17, -19, -4, -29, -15, -9, -69, -65, -7, -1, 2, 3, -11, -7, 9, 12, -7, -17, 0, 5, -7, -4, -22, 31, 17, -10, 9, 1, 9, 7, 5, 14, -22, 2, -4, -42, 34, -24, -9, -28, -25, -34, 7, 9, 15, 21, -10, 0, 9, 12, -30, -25, 6, 21, -23, -13, -16, 29, 26, -22, 3, 13, 6, 27, -6, 22, -29, -5, 8, -30, 30, -20, 1, -1, 2, 12, 5, 14, 16, 22, -31, -2, 9, 13, -25, -31, -3, 11, -32, -31, -22, 30, 20, -21, -6, 12, 11, 18, 2, 23, -54, -8, 6, -23, 35, -16, 18, -7, 13, 1, 11, 6, 24, 18, -24, 10, 6, 17, -13, -40, 1, 11, -28, -9, -26, 28, 15, -4, -15, 5, 21, 14, 5, 17, -53, 5, 1, -15, 23, -19, 10, -2, 15, 3, 12, 14, 17, 24, -38, 13, 14, 7, -19, -51, -16, 19, -52, 2, -11, 4, 3, -20, -37, -5, 9, 15, 5, 23, -54, -6, 3, -68, 20, -4, -7, -10, 18, 8, 17, 12, 16, 22, -10, -6, 2, 20, -27, -41, -28, 21, -24, 12, 2, -8, 14, -19, -30, 12, 11, 18, 14, 16, -69, -7, 7, -61, 23, -1, 7, -6, 6, 4, 23, -6, 18, 26, 3, -8, 17, 9, -52, -21, -39, 9, -41, 13, -2, -1, 16, -15, -34, 3, -2, 17, -24, 22, -55, 2, 9, -30, 29, -14, 3, -6, 15, 8, 26, -1, 18, 29, -2, 21, 6, -25, -22, -38, -22, 13, -65, 21, -9, 13, 12, -26, -12, 15, 22, 22, -40, 19, -53, 
  -80, -86, 15, -22, -3, -100, -64, -45, -22, -7, -14, 22, 0, 3, -2, -38, 22, 28, -39, 21, 20, 8, 9, -28, -10, 28, 17, 30, -23, 30, 10, 19, -3, 8, -52, -100, 15, -13, -6, -53, -69, -8, -18, 7, 1, 26, 11, -9, 6, -6, 14, 13, -38, 14, 3, 7, 9, -4, -14, 17, 8, 7, -15, 11, 11, 19, 9, 13, -49, -43, 14, 0, -38, -15, -34, -2, -4, -15, -29, 11, 0, -11, 0, -34, 6, 15, -69, -23, 5, 5, 13, -19, -15, -6, 13, -7, 4, 4, 9, 5, 2, 11, -27, 3, 17, -8, -32, 10, 6, 45, 6, -12, -36, -7, 3, -5, 11, -39, -19, 12, -45, -37, -15, 8, 14, -10, -20, -12, 10, -8, 32, 6, 0, 7, -35, 13, -16, -5, 7, 12, -22, -2, 29, 3, 24, -14, -27, -28, -21, -1, 8, -62, -23, 9, -33, -41, -15, 11, 19, -13, -8, -24, 17, -25, 13, 13, 7, 1, -34, -3, -19, 21, 14, 9, -18, 22, 14, 5, 28, -36, -18, -32, -32, 6, 15, -48, -31, 16, -25, -15, -42, 15, 6, -10, 15, -7, 6, -9, 17, 12, 0, -4, -25, -6, -5, 0, 22, 1, -9, 21, 16, 16, 17, -36, -15, -5, -31, 7, 6, -56, -39, 39, -1, -14, -16, 12, 17, -2, 12, -13, 0, -2, -16, 23, 8, -2, -18, -3, 2, 17, -18, -32, 12, 11, 9, 14, 9, -21, -25, -3, -14, 9, 8, -31, -43, 62, 6, -27, -11, 3, 28, 14, 2, -51, -14, 8, -22, 16, -24, -38, -37, 12, 2, -14, 13, -27, 25, 4, 8, 18, 21, -2, -26, 9, -9, -11, -21, -10, -33, 13, 21, -23, -9, -47, 5, 9, 6, -46, 6, -4, -4, -38, -19, -50, -38, -6, 4, -26, -5, -11, 22, 12, 7, 14, 15, 21, -17, 17, -2, -29, 0, -8, -33, -40, 23, -25, -12, -42, -45, 4, 2, -40, -6, 4, -33, -35, -47, -41, -43, 6, 25, -42, -36, -5, 26, 16, 6, 21, 29, 41, -17, 14, 20, -33, 14, -11, -49, -27, 37, -37, -32, -50, -93, 14, 7, -30, -22, 2, -28, -6, -100, -26, -40, -13, 
  21, -23, 35, -49, -1, -23, -56, 16, -31, 35, 20, -44, -55, 8, -30, 20, 35, -29, 14, 20, 22, -2, 5, 29, 33, -3, 5, -14, 33, -4, 21, 1, -8, 10, 26, -25, 1, -25, -2, 1, -36, 7, -15, 24, 11, -18, -36, 12, -34, 22, 1, -37, 11, -2, 25, -19, -27, 28, 18, -41, -18, -13, 26, -38, 7, -4, -45, -28, 10, -35, -8, -12, -11, 6, -31, -5, -12, 13, 23, 3, -12, -1, -41, 7, 3, -44, 11, -12, 25, -1, -24, 14, 2, -52, -22, -12, 19, -33, -11, -23, -36, -43, 11, -5, -42, -11, -19, -6, -11, -13, -17, 0, 10, 4, -1, 2, -24, 11, 0, -31, 1, -23, 15, -10, -18, 10, -9, -74, -11, -25, 1, -68, -36, -40, -96, -42, 8, -9, -44, 8, -11, -3, 26, -14, -10, 4, 2, 1, -2, 4, -21, 4, -13, -52, 0, -22, 17, -24, -10, 9, -17, -83, -7, -15, 7, -84, -50, -40, -91, -38, 7, 21, -8, 8, 7, -10, 12, -25, -2, -7, 2, 17, 20, 1, -20, -5, -21, -38, -8, 5, 8, -27, -10, 16, 6, -36, 20, -5, 19, -38, -21, -31, -56, -11, 9, 7, 7, 15, 9, -23, 15, -35, -12, 1, 9, 25, 30, -18, -10, -6, 6, -57, -2, 17, -8, -48, -20, 7, 11, -7, 28, 10, 21, -17, 14, -3, -24, 18, 1, -6, 9, 20, 12, -27, -1, -12, 3, 11, 14, 25, 36, -51, -1, -28, 10, -69, -12, 20, -12, -41, -26, -15, 17, 5, 26, 11, 26, -11, 5, 12, -5, 9, -22, -18, 15, 15, 20, -49, -19, -33, 12, -18, 9, 17, 34, -56, 15, -46, 11, -28, 1, 19, -43, -30, -14, -32, -2, 16, 24, 5, 10, -4, 6, 24, 4, 25, -71, -29, 22, 0, 27, -103, -47, -39, 10, -33, 1, 25, 21, -35, 19, -69, 7, -13, 10, 23, -37, -29, -6, -73, 7, 16, 27, 7, 12, 8, 17, 34, 2, 31, -74, -48, 20, -27, 11, -127, -127, -55, -63, -10, -23, 23, 24, -40, 9, -24, 22, -33, -12, 16, -15, -32, -16, -69, 23, 22, 30, -25, 19, -31, 14, 23, -16, 42, 
  -1, 19, -10, 2, 17, -9, -5, 4, 0, -7, -5, -36, -18, -1, -3, 22, -7, -3, 28, 7, -36, 16, 14, 3, 5, -38, 1, 2, -3, 0, -9, -28, -37, -27, 11, 16, -25, -18, 33, -2, -10, 2, 20, 12, -22, -51, -38, 7, 15, 15, -12, 5, 28, -31, -42, 6, 8, 8, 14, -49, 16, -70, 0, -4, 0, -28, -31, -40, 8, 8, -25, -13, 21, 17, -3, 2, 28, 16, -15, -39, -16, -2, 17, 9, 4, 6, 24, 18, -18, 4, 11, -6, 24, -22, -5, -49, -7, -10, -5, 10, 24, -58, 3, 0, 1, -15, 16, 24, 13, 13, 28, 13, -6, -35, -10, 3, 12, 9, -5, 2, 17, 14, -24, 2, -9, 2, 9, 11, -13, -33, -34, 7, -11, 12, 6, -47, 14, -16, 8, -11, 13, 24, 13, 19, 27, 18, -13, -35, -10, 2, 5, 10, -11, 21, 22, 10, -19, -8, 9, -1, -7, 15, 0, -38, -53, 12, 5, 1, 13, -24, 15, 1, 6, -14, 5, 11, -5, 7, 29, 15, -17, -41, -4, 4, 3, 18, -10, 4, 24, 9, -21, 7, -2, -2, 2, 3, 4, -33, -45, 10, -7, -2, 17, -15, 8, 6, 11, -8, -11, 8, -17, 16, 24, 11, -21, -57, -26, -1, 11, 11, -5, 17, 15, 13, -43, -11, 10, -12, -12, 13, 18, -33, -18, 21, -1, 10, 16, -11, 16, 8, 21, 8, -19, -16, -2, -6, -12, 19, -3, -60, -30, -5, 4, 10, -17, 17, -3, 6, -27, -17, 21, 3, -13, 17, 8, -18, -6, 25, 3, 11, 23, -11, 6, 14, 15, 9, -73, 0, 7, -13, -19, 8, 5, -39, -32, -8, 3, 0, -20, 36, -65, 8, -11, -13, 24, -5, -29, 16, 10, -7, 9, 20, -3, 10, 17, -8, -9, 14, 18, 16, -108, 13, 7, -21, -30, -15, 14, -30, -39, 4, -1, -45, -42, 37, -97, -1, -9, 9, 18, -9, -8, 10, -2, 1, -2, 22, -1, 13, 14, -8, -6, 12, 11, 18, -127, 7, 6, -25, -20, -39, 27, -42, -38, -2, -27, -20, -21, 38, -88, 9, -7, -26, 20, 1, -23, 14, 20, 5, -1, -3, 6, 4, 24, 2, 
  10, 23, -4, 1, 7, -34, 2, -54, -38, -23, -23, 10, -29, 17, -31, -52, -23, -18, -1, -46, -2, 31, 21, 33, -42, -6, -1, 20, -37, -28, -9, -43, -55, -3, 19, 23, -31, 14, 5, -6, 15, -23, -12, -31, 3, 10, -6, 10, -20, -52, -29, -29, -15, -45, -9, -8, 0, 23, -5, -33, -2, 13, -17, -48, -4, -29, -42, -12, -5, 36, -44, 11, -15, 1, 20, -33, -14, -37, -20, -1, -19, 10, -18, -52, -25, -18, -12, -40, -11, 12, 13, 14, -10, -39, -18, 3, 6, -43, -3, -43, -34, -12, 2, 28, -28, -4, -26, 5, 44, -29, -24, -50, -13, 1, -20, 8, -38, -52, -46, -22, -18, -25, -11, -8, 10, 21, 2, -38, 0, 8, 9, -34, -9, -31, -51, -20, 11, 31, -27, 12, -26, -8, 42, -20, -38, -46, 0, 1, -9, 22, -26, -67, -23, -31, -25, -44, -2, 6, 18, 20, -50, -33, -15, 4, -3, -41, -15, -50, -50, -20, 18, 43, -41, 13, -4, 10, 35, -18, 0, -19, 20, 15, -17, 26, -34, -50, -35, -43, -15, -47, -7, -1, -4, 32, -13, -55, -5, 6, -7, -41, -30, -61, -68, -24, 21, 34, -35, 18, -14, 9, 25, -10, -10, -26, -13, 2, 0, 29, -9, -36, -57, -5, -3, -63, -3, 12, 17, 24, -26, -33, 10, 6, -36, -27, -10, -40, -52, -15, 20, 27, -18, 3, -17, -1, 3, -15, -25, -16, 5, -13, -33, 25, -19, -27, -63, -21, -19, -59, -2, 4, 21, 25, -13, -31, -4, 4, -37, -23, -22, -45, -39, -11, 18, 25, -12, 14, -12, -12, 5, -8, -12, -28, -11, -5, -24, 32, -24, -24, -42, -3, 1, -40, -8, 9, 24, 35, -24, -41, 5, -7, -10, -18, -10, -45, -44, -29, 9, 21, -18, 2, 4, -7, -9, -24, -20, -20, -13, 5, -38, 30, 2, -33, -30, -2, -1, -37, -8, 6, 15, 23, -53, -40, 7, 7, -44, -36, -6, -36, -58, -11, 22, 16, 0, -18, -1, -17, -11, -28, -20, -9, -2, -6, -28, 32, 13, -6, -36, 16, 22, -26, -23, -7, 22, 48, -42, -16, -4, 13, -44, -17, -7, 2, -27, -4, 
  14, 15, 9, -1, -39, 13, 8, -28, -8, -48, -6, -71, -53, -7, -19, 5, -61, 24, -49, -6, 14, -7, 30, -26, 30, -6, 26, 5, 30, 25, 19, -2, -40, -7, 12, 1, -6, 4, 22, 0, 7, -26, 14, -29, -21, -32, -53, -9, -20, 20, -49, -2, 18, -10, -1, 5, 9, -4, 28, -17, 14, -5, 27, 4, 14, -12, -31, 6, 0, -10, -8, -2, 30, -12, -3, -25, 23, -28, -27, 7, -32, 3, -26, 2, -49, 8, 21, -29, -3, 5, 10, -11, 11, -17, 15, 13, 39, -1, 10, -19, -38, 12, -7, -7, -18, -27, 19, -1, -16, -18, 9, -31, -52, -13, -33, -2, -30, 10, -37, -3, 13, -57, -11, 12, 5, -8, 18, -9, 10, 18, 44, -5, 4, -31, -39, 17, 3, -13, -24, -40, 20, -40, -18, -9, 19, -27, -66, -4, -44, 9, -28, 8, -31, -20, 24, -68, -22, 16, 0, -9, 5, -12, 1, 8, 27, -22, 6, -49, -38, 10, -1, 4, -6, -57, 29, -28, 0, -33, 6, -23, -53, -3, -49, 11, -47, 8, -25, -9, 34, -25, -37, 30, -8, -10, -8, -13, 2, 14, 12, -9, -20, -43, -50, 18, -8, -19, 8, -50, 20, -4, 4, -48, -33, -40, -10, -9, -42, 0, -33, 6, -18, -15, 31, 12, 0, 22, 2, -14, 9, -18, 11, 27, 28, -11, -27, -27, -45, 23, 3, 0, 10, -21, 23, 1, 9, -43, -38, -36, 9, -14, -37, -2, -46, 6, -9, -58, 19, 8, -8, 29, -33, 1, -20, -26, -20, 21, 6, -40, -45, -40, -17, 21, 7, -12, 8, -37, 33, 5, 10, -14, -12, -40, 11, -28, -53, -5, -69, 6, -14, -70, 36, 10, 14, 48, -38, -6, -19, -11, -12, 22, 18, -70, -45, -55, -46, 19, 10, -6, 21, -4, 21, 10, 13, -21, -13, 0, 19, -6, -22, -10, -37, 9, -21, -49, 34, 15, 20, 32, -11, -3, 2, -25, 7, 24, 7, -33, -22, -55, -45, 16, 19, -5, 21, 5, 3, 9, 11, -22, -3, -22, 28, -11, -12, -40, -34, 14, -31, -48, 18, 26, 14, 5, -23, -4, 12, -33, 8, 27, 16, -28, -39, -52, -40, 11, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 12,374 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0063880430534482002, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[18] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 18 } };
const TfArray<18, float> quant6_scale = { 18, { 9.3221882707439363e-05, 8.1770158431027085e-05, 0.00012495066039264202, 0.00019650957256089896, 9.2012225650250912e-05, 8.422575774602592e-05, 9.0025881945621222e-05, 0.0002599438012111932, 8.6701060354243964e-05, 0.00010997599019901827, 0.00017183295858558267, 0.00011175805411767215, 0.00013580809172708541, 0.0001027089892886579, 0.0001198370082420297, 7.5618525443132967e-05, 0.00011614662798820063, 0.00021224413649179041, } };
const TfArray<18, int> quant6_zero = { 18, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[18*1*3*17] = { 
  /* [0][0][][] */ 77,60,-38,90,-55,52,14,78,-49,1,51,-97,17,57,-102,105,-50, 71,47,-86,127,-48,26,5,5,24,-44,29,-93,4,74,-83,101,-18, 43,47,-101,67,-43,12,63,81,-34,-58,52,-82,-10,78,-89,24,-8, 
  /* [1][0][][] */ -127,-71,-32,-116,47,72,-7,64,17,-21,-44,27,43,-15,34,-42,-33, -103,-63,-126,-64,-10,100,21,20,-20,22,-35,48,-42,6,22,12,-14, -110,42,-124,-114,5,105,-17,70,-21,-28,-70,45,-26,3,65,-43,-45, 
  /* [2][0][][] */ -127,-15,0,116,-50,71,-41,0,33,-2,-31,8,-28,8,-14,14,2, -73,-16,-90,67,-39,47,-91,25,20,-5,-43,-4,-12,0,9,-6,1, -14,9,-108,61,-20,50,-54,35,21,0,-38,10,-11,-8,5,32,-14, 
  /* [3][0][][] */ -90,75,-14,-42,4,2,4,-9,-6,0,16,-18,-5,27,-6,-15,3, 16,37,19,-27,1,17,-6,-26,5,0,7,-9,0,28,-10,0,13, -97,127,-18,-48,-2,25,1,-6,0,-13,17,-11,-5,11,5,-15,6, 
  /* [4][0][][] */ -45,-38,-1,68,51,42,-112,-6,64,-127,29,-18,-4,-16,8,6,39, -80,18,61,38,-5,115,-67,-36,89,-95,13,27,-34,0,-4,44,41, -8,0,61,57,61,8,-50,27,56,-112,34,16,26,3,45,8,62, 
  /* [5][0][][] */ 69,83,-53,127,-112,-36,50,-41,-3,90,-95,49,6,-22,31,16,5, 49,73,-28,125,-83,-47,104,-54,9,68,-60,-2,64,-62,13,-33,-24, -19,21,21,106,-74,-28,80,-114,18,73,-90,-5,29,-39,28,7,15, 
  /* [6][0][][] */ 10,-2,-80,-67,87,-68,-81,91,2,-40,20,71,-31,-62,57,-84,18, -8,-55,-42,-39,81,-35,-66,62,7,-62,-1,79,-63,-36,55,-44,3, 127,-21,44,35,87,-61,-49,56,-7,-93,37,66,-40,-46,54,-7,19, 
  /* [7][0][][] */ -57,-11,-19,1,18,-3,-17,5,12,-25,5,-3,2,2,6,-3,5, 51,0,17,-10,17,14,-13,10,17,-19,13,-6,-5,0,4,5,1, -127,85,-26,16,0,-1,-27,11,4,-28,1,-6,-9,11,0,15,10, 
  /* [8][0][][] */ -27,-82,86,69,-18,-37,-18,52,-117,112,-16,-27,31,-58,-6,37,-33, -28,-79,95,87,-36,-2,-27,43,-127,120,-11,14,21,-47,-8,47,-47, -4,-48,77,66,-53,-12,-22,43,-85,87,24,-20,35,-35,-9,38,-47, 
  /* [9][0][][] */ 15,6,9,127,-86,61,-10,-28,6,94,-84,52,-13,20,-40,34,-20, -24,-42,56,98,-82,32,-87,-61,29,21,-74,57,-27,-17,26,23,1, -14,-18,17,71,-33,70,-7,-39,84,54,-20,11,9,-19,0,3,7, 
  /* [10][0][][] */ -110,127,-28,16,30,5,-6,-37,44,-70,28,-16,-21,17,-32,23,17, 27,-3,12,17,6,32,-7,-17,25,-46,25,-20,-6,3,-1,1,15, 50,30,8,21,46,5,-19,-26,52,-54,40,-13,-31,17,-30,23,16, 
  /* [11][0][][] */ 78,24,-58,38,35,-85,-22,119,-82,-39,53,33,-127,57,-14,-9,1, 13,16,-34,4,35,-12,-23,101,-25,-62,80,3,-61,58,-6,2,22, 26,-30,21,21,89,-29,-23,111,-13,-85,77,-5,-65,14,5,-17,25, 
  /* [12][0][][] */ 37,2,105,-52,15,22,-20,-33,-24,-38,-2,4,28,-24,17,-16,34, 61,42,99,-67,3,10,-3,-2,-31,10,-20,7,21,9,2,-22,26, 9,-13,127,-70,34,-5,-4,29,-38,1,5,-26,50,-17,-3,-19,10, 
  /* [13][0][][] */ 20,89,-127,-95,26,83,4,-22,34,-13,-42,0,-16,-4,23,25,-15, 7,41,-102,-96,44,62,4,-29,24,16,-16,-4,2,-5,6,7,-10, 39,64,-106,-43,-10,57,3,16,-20,38,-68,-2,10,21,-4,-6,31, 
  /* [14][0][][] */ -21,127,-82,-62,-71,61,43,3,-33,40,-78,-16,37,24,-10,11,-38, 6,33,-26,-56,-59,41,72,-27,-6,61,-94,-5,18,32,-15,-10,-33, -71,15,-24,-47,-38,29,49,-23,-25,92,-71,-18,57,4,-10,25,-33, 
  /* [15][0][][] */ 19,54,-47,-3,-2,-127,-100,64,-7,-3,-7,115,48,-101,91,-114,5, 32,52,-6,71,68,-75,-50,60,8,-48,35,98,57,-76,95,-97,32, 80,68,98,35,7,-79,-19,41,-29,-55,46,85,36,-42,84,-59,43, 
  /* [16][0][][] */ -6,-127,20,-87,30,-26,44,-69,-7,20,53,-14,-71,21,-18,-12,12, -5,-49,-4,-102,-68,-64,36,-56,-25,-17,52,-23,-44,1,-16,-44,9, 78,-68,38,-101,-18,-26,16,-39,-41,-9,68,18,-63,37,-43,-22,14, 
  /* [17][0][][] */ -40,78,-22,0,34,7,1,15,-20,5,-8,-13,2,-6,-5,10,-20, -12,-62,-20,-26,51,-13,19,17,-15,-5,7,-15,-6,7,0,18,-10, 127,-85,10,-20,40,-1,18,10,8,-2,-11,-10,6,-11,-7,12,-16, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 18,1,3,17 } };
const TfArray<18, float> quant7_scale = { 18, { 0.0026652950327843428, 0.0023378801997750998, 0.0035724486224353313, 0.0056183803826570511, 0.0026307099033147097, 0.0024080879520624876, 0.0025739185512065887, 0.0074320207349956036, 0.0024788591545075178, 0.0031443096231669188, 0.0049128546379506588, 0.0031952604185789824, 0.0038828721735626459, 0.0029365397058427334, 0.0034262447152286768, 0.002161999698728323, 0.0033207335509359837, 0.0060682455077767372, } };
const TfArray<18, int> quant7_zero = { 18, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[34] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 34 } };
const TfArray<34, float> quant8_scale = { 34, { 7.582619582535699e-05, 9.7337680927012116e-05, 7.7253826020751148e-05, 8.3418031863402575e-05, 9.767596930032596e-05, 8.5308478446677327e-05, 6.4602936618030071e-05, 0.00010390271199867129, 9.4841750978957862e-05, 7.0047222834546119e-05, 0.00010616973304422572, 6.9368506956379861e-05, 7.2073533374350518e-05, 8.3056060248054564e-05, 7.6733573223464191e-05, 7.1564158133696765e-05, 8.1034799222834408e-05, 0.00010477223986526951, 8.571471698815003e-05, 8.3404323959257454e-05, 8.7118576630018651e-05, 7.0353424234781414e-05, 7.9384080891031772e-05, 4.835257277591154e-05, 6.5511048887856305e-05, 0.00010012020356953144, 5.9362686442909762e-05, 5.8406607422512025e-05, 9.4773960881866515e-05, 8.3085535152349621e-05, 5.7591729273553938e-05, 8.5943916928954422e-05, 9.2493581178132445e-05, 6.7331435275264084e-05, } };
const TfArray<34, int> quant8_zero = { 34, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[34*1*3*18] = { 
  /* [0][0][][] */ -29,-11,33,-25,-81,-25,65,-31,-5,-21,14,-1,-30,127,49,42,-18,85, -29,-23,1,-28,-57,10,47,11,0,3,-18,-9,-1,-26,25,-2,-33,41, -16,-24,18,-42,-28,14,55,-6,2,8,39,-30,-7,93,9,14,-60,72, 
  /* [1][0][][] */ -69,19,25,44,14,-58,16,104,-2,-15,-16,-5,-10,-47,-27,-1,-7,22, -62,10,23,11,15,-72,7,127,-2,-24,-2,-15,-6,-77,-31,4,-18,-13, -65,-8,-27,29,15,-23,-16,94,11,-11,8,-23,3,-71,-3,4,-17,-5, 
  /* [2][0][][] */ -6,-83,-69,-108,29,12,-49,-62,52,37,5,-24,16,-75,-65,20,-40,6, 21,-10,-52,-101,5,-7,-56,-56,109,-6,20,-33,73,-106,-51,-17,-95,24, -55,-24,-72,-72,8,-2,-102,-60,26,6,-42,-45,15,-127,-28,-20,-55,26, 
  /* [3][0][][] */ -80,-10,-21,-127,4,29,100,-13,-30,5,-26,15,1,-40,-60,26,26,45, -83,0,-29,-126,38,-4,73,6,-37,-5,-22,4,-2,-80,-96,32,9,15, -66,4,-63,-67,7,-10,48,27,-32,1,10,28,29,-62,-118,25,33,10, 
  /* [4][0][][] */ -56,0,-29,18,-74,-58,-46,-71,-34,-46,-51,-68,51,20,27,20,45,-27, -80,-3,-59,14,-127,-75,-39,-81,-11,-87,-38,-60,-10,18,31,-4,29,-5, -64,1,-37,25,-73,-85,-7,-79,13,-93,-47,-41,38,18,16,6,43,-16, 
  /* [5][0][][] */ 1,59,8,4,-41,-124,-2,-18,7,-78,-94,-2,-70,-16,16,-10,-5,65, -6,88,25,-25,-39,-18,19,-44,14,-79,-127,-14,-86,4,10,2,0,31, 0,13,0,-16,-91,61,7,-32,15,-40,-96,-16,-104,3,10,2,1,51, 
  /* [6][0][][] */ -87,57,-17,11,15,-100,-90,77,16,-52,-84,-87,8,-32,25,-77,-34,71, -127,82,-48,22,-16,-68,-54,-51,21,-56,-43,-83,-18,-44,13,-84,-18,53, -80,0,-44,-25,-23,-16,-56,22,45,-36,-88,-56,28,-75,6,-13,30,108, 
  /* [7][0][][] */ -21,52,-21,4,-8,-127,25,20,-80,-92,-18,15,-70,-9,-17,-23,45,2, 10,41,-10,6,-20,-90,19,26,-111,-97,4,11,-112,20,-17,-15,25,1, 16,36,3,5,-27,8,33,9,-74,-120,-7,13,-110,36,-8,-11,32,-14, 
  /* [8][0][][] */ -95,38,5,12,-106,-43,-11,-69,-22,-49,-63,-39,-58,28,11,-4,18,-4, -79,37,-13,13,-127,10,48,-63,-9,-27,-93,-38,-54,2,10,16,54,6, -52,28,-2,-4,-87,26,29,-52,1,-16,-82,-25,-61,22,15,54,59,-20, 
  /* [9][0][][] */ 10,16,-16,-1,-28,3,127,-32,-25,-82,-39,53,-77,54,12,46,0,4, 15,11,-10,-21,-63,35,-17,-20,-29,-90,-48,83,-121,77,5,115,-20,2, 23,17,0,-84,-24,5,114,-17,1,-54,-35,59,-53,6,5,31,-39,-22, 
  /* [10][0][][] */ -12,-7,-2,-13,3,-76,45,19,23,-45,5,72,-5,2,-44,33,-48,30, 20,2,-3,-19,-14,-94,33,5,34,-95,5,-19,-10,12,-34,-9,-27,14, 21,1,-18,-24,-10,-92,33,-8,16,-127,-2,49,-14,17,-8,-15,-12,20, 
  /* [11][0][][] */ 13,-61,-6,-34,-40,-27,-15,-64,-3,-3,-2,94,5,-126,-52,-29,94,45, 25,-49,-31,-47,-40,-51,38,-74,-8,-12,-47,10,-3,-127,-79,-14,107,2, -4,-41,-4,-5,-26,-71,11,-66,0,-36,-28,68,33,-56,-57,33,113,24, 
  /* [12][0][][] */ -43,-27,-49,-101,-25,-11,52,-64,8,-23,-54,110,4,-87,-46,32,62,-5, -65,-45,-36,-108,-16,-21,58,-28,-2,-15,-41,-22,4,-104,-127,52,116,10, -60,-26,-26,-50,8,0,66,-10,2,-2,5,54,10,-92,-127,70,-52,-8, 
  /* [13][0][][] */ -20,0,-2,127,-11,-50,-15,86,-11,-14,10,6,-31,0,-13,-39,-7,-5, -3,3,-8,-8,-15,-59,-13,12,-43,-21,74,-22,-7,1,1,-26,-14,-5, 14,-11,-17,96,-32,-8,-22,56,-36,-18,42,-14,-5,3,6,-37,4,-12, 
  /* [14][0][][] */ -64,-13,-2,-9,3,45,77,23,-17,-16,-17,31,-2,3,-32,125,-18,-96, -37,-118,-58,-53,5,-5,86,-14,-15,-12,-20,-11,0,-97,-91,42,-127,-100, -39,-68,-73,-54,28,16,57,14,-14,-12,15,52,-3,-119,-114,54,-125,-70, 
  /* [15][0][][] */ 127,-27,47,24,-19,42,10,-54,-15,27,15,-5,-10,114,63,5,-68,-56, -5,-17,34,27,-83,12,-13,-94,-20,-27,-27,19,-12,62,27,-18,-35,-42, -14,-27,-16,38,-120,35,-3,-67,17,-23,-41,-34,-5,89,72,-33,1,-39, 
  /* [16][0][][] */ 101,-127,-66,16,-57,51,-33,-37,46,5,-45,76,-11,-105,-19,17,-16,-112, 40,-56,-26,18,-52,13,10,15,-7,-49,-22,58,-59,-22,-4,38,3,-97, 109,-18,-20,36,-52,-15,-15,8,35,-58,-41,98,-86,-31,3,9,15,-58, 
  /* [17][0][][] */ 39,-102,-25,5,42,4,-25,-6,-28,14,58,11,-5,-82,-49,41,-61,-110, 35,-127,-47,-1,8,-1,-43,-2,-35,11,57,14,3,-103,-99,58,-89,-97, 4,-59,-60,-9,48,-18,-33,-11,-32,-2,41,-7,15,-43,-78,18,-85,-81, 
  /* [18][0][][] */ -62,-10,-31,77,-59,-93,-38,-73,-9,-62,-38,-67,10,34,73,37,1,-36, -97,9,-48,21,-90,-114,-45,-127,15,-112,-52,-113,20,24,12,-10,0,-39, -74,14,-38,57,-90,-81,-26,-107,20,-122,-51,-75,27,46,43,28,-5,-22, 
  /* [19][0][][] */ 47,-5,-6,-32,-18,10,27,-36,127,21,-36,17,-16,29,-7,-6,-3,-9, 20,-32,-23,-51,-22,0,-51,-52,-34,12,-61,56,2,-34,4,-4,10,-21, 32,-53,-27,-5,-24,2,-82,-61,116,7,-55,2,6,-103,-24,-30,-6,-35, 
  /* [20][0][][] */ 127,7,65,-9,-4,-13,26,1,-1,-5,-21,54,-5,-10,-37,-6,-46,6, 69,11,25,-23,8,-24,-8,-6,-22,7,-4,-52,-3,4,-35,-6,-11,7, 89,1,52,-11,-8,-37,7,-2,-21,-44,-15,77,6,12,-20,-13,4,37, 
  /* [21][0][][] */ -10,-39,-49,63,-44,-29,-23,-44,-127,-17,-13,-12,37,-18,-20,99,21,-104, -42,-44,-96,42,11,-24,-36,-55,-126,-25,64,-35,49,-22,11,19,-9,-70, -33,-18,-96,102,-23,-34,-14,-26,-77,-29,-19,-15,27,24,34,112,-28,-32, 
  /* [22][0][][] */ 5,10,-3,5,38,-17,-77,64,-36,14,127,-45,24,-86,-35,-38,-27,-37, 13,10,61,15,3,-11,-21,47,-10,5,-18,-36,4,-56,-45,-14,-75,-8, -14,-14,28,12,33,-22,-14,32,-40,1,43,-27,6,-54,-40,3,-70,-32, 
  /* [23][0][][] */ 65,-59,-77,57,-65,-42,-2,110,-27,-82,124,38,-88,17,16,-53,-6,106, 12,-54,-73,127,-51,-80,-48,94,-58,-71,42,-5,-93,51,-25,-121,-34,43, 12,-7,-44,76,-39,-65,-53,120,-37,-59,70,21,-113,7,-11,-115,-36,56, 
  /* [24][0][][] */ 14,-17,66,-88,6,50,-103,-30,-31,17,-95,-101,-46,21,41,-80,-39,-58, 10,62,127,-88,-2,22,-35,-32,-10,54,-87,-74,-55,6,44,-86,-13,-16, -43,32,61,-20,-9,29,-5,-10,-5,23,-93,-23,-46,12,38,-56,-33,-18, 
  /* [25][0][][] */ 35,-102,-108,-31,-46,74,-122,-108,21,37,-27,-34,23,-50,41,-45,14,-24, 43,-124,-65,-30,-31,40,-127,-69,5,17,-13,-50,13,-79,27,-48,-7,-34, 58,-107,-53,0,-22,64,-78,-69,-9,17,0,0,-1,-77,15,-17,-23,-46, 
  /* [26][0][][] */ -19,-82,76,-31,38,-41,-88,-38,37,0,39,-21,62,-125,-86,-122,79,20, 15,-127,65,-53,3,-43,-103,-6,17,11,120,-8,-21,-65,-67,-88,-20,-33, -27,-115,71,-47,50,-13,-40,-40,-9,3,-16,-12,47,-18,-35,-28,66,-2, 
  /* [27][0][][] */ -32,-18,-17,-7,-67,-36,-97,-85,-2,-12,-74,-127,101,-18,11,-82,4,99, 118,-34,6,-10,-34,-40,-92,-24,31,-4,-105,-66,-31,-64,3,-61,-33,48, 50,-32,11,-32,-22,-12,-109,-91,64,1,-89,-32,109,-57,-14,-25,-53,14, 
  /* [28][0][][] */ -30,13,127,-39,14,-18,-24,27,21,20,-3,-15,-34,-46,-55,-35,-86,-22, -36,26,-7,-63,13,-7,-16,20,22,14,-29,-45,-42,-27,-70,-48,-45,-19, -55,-2,115,-52,7,3,6,23,38,8,-12,-32,-39,20,-51,-17,-5,-9, 
  /* [29][0][][] */ 6,-26,-33,-13,-13,127,15,-47,-33,15,48,-7,-3,-32,-12,27,-5,-82, 4,-109,-68,-12,31,14,-15,-44,-46,51,50,-34,7,-57,9,17,-47,-120, -41,-79,-21,-4,8,90,-75,-55,-33,25,63,-76,13,-22,-23,-13,-77,-80, 
  /* [30][0][][] */ 1,7,28,-8,10,86,-73,20,-13,127,-7,-90,7,-86,15,-51,-21,-61, -9,10,51,-18,51,83,-37,2,-27,40,-32,-91,49,-42,0,-54,-109,-42, 2,-16,46,-43,-57,23,32,-17,-17,90,-64,-25,3,-40,-19,-42,-66,-8, 
  /* [31][0][][] */ 54,-94,-19,-115,12,40,43,-73,21,33,-27,38,17,-77,-60,127,-36,-67, -7,-89,-19,-96,-16,22,23,-71,3,8,-20,28,7,-93,-69,52,-60,-75, 29,-102,-30,-50,12,19,22,-56,24,35,-21,49,31,-95,-79,42,-37,-56, 
  /* [32][0][][] */ 35,-42,-89,-46,-119,127,33,-99,-16,-5,-43,-2,-31,0,39,43,-35,-21, 14,-101,-88,-71,-74,26,-12,-68,6,9,-35,-18,-10,-80,27,-7,-57,-30, 0,-53,-43,-15,-17,100,-67,-38,-4,44,12,-59,-5,-127,20,-26,-48,-46, 
  /* [33][0][][] */ -43,-100,-31,6,-23,-13,-64,-59,13,14,-35,-55,114,-7,-21,7,46,-46, -58,-120,-39,30,-20,-26,-18,-127,60,-31,-83,-42,-25,-44,-12,83,31,-67, -57,-88,-104,-6,-15,-19,-1,-113,-4,27,-52,-72,109,-27,-1,30,-3,-53, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 34,1,3,18 } };
const TfArray<34, float> quant9_scale = { 34, { 0.0034542852081358433, 0.0044342475011944771, 0.0035193213261663914, 0.0038001337088644505, 0.0044496580958366394, 0.0038862535730004311, 0.002943006344139576, 0.0047333193942904472, 0.0043205446563661098, 0.0031910224352031946, 0.004836594220250845, 0.0031601032242178917, 0.003283331636339426, 0.0037836439441889524, 0.0034956210292875767, 0.0032601268030703068, 0.0036915645468980074, 0.0047729308716952801, 0.0039047596510499716, 0.0037995092570781708, 0.0039687128737568855, 0.0032049715518951416, 0.0036163656041026115, 0.0022027159575372934, 0.0029843754600733519, 0.0045610060915350914, 0.0027042850852012634, 0.0026607306208461523, 0.0043174563907086849, 0.0037849864456802607, 0.0026236085686832666, 0.0039152009412646294, 0.004213572945445776, 0.0030673039145767689, } };
const TfArray<34, int> quant9_zero = { 34, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 41, 17, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 41, 18, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 41, 1, 18, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 21, 18, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 21, 34, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 21, 1, 34, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,41,17 } };
const TfArray<1, float> quant16_scale = { 1, { 0.03497619554400444, } };
const TfArray<1, int> quant16_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,41,18 } };
const TfArray<1, float> quant17_scale = { 1, { 0.049611911177635193, } };
const TfArray<1, int> quant17_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,41,18 } };
const TfArray<1, float> quant18_scale = { 1, { 0.049611911177635193, } };
const TfArray<1, int> quant18_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,41,18 } };
const TfArray<1, float> quant19_scale = { 1, { 0.02195134200155735, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,41,1,18 } };
const TfArray<1, float> quant20_scale = { 1, { 0.02195134200155735, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,21,1,18 } };
const TfArray<1, float> quant21_scale = { 1, { 0.02195134200155735, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,21,18 } };
const TfArray<1, float> quant22_scale = { 1, { 0.02195134200155735, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,21,34 } };
const TfArray<1, float> quant23_scale = { 1, { 0.086182162165641785, } };
const TfArray<1, int> quant23_zero = { 1, { 45 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,21,34 } };
const TfArray<1, float> quant24_scale = { 1, { 0.086182162165641785, } };
const TfArray<1, int> quant24_zero = { 1, { 45 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,21,34 } };
const TfArray<1, float> quant25_scale = { 1, { 0.027194608002901077, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,21,1,34 } };
const TfArray<1, float> quant26_scale = { 1, { 0.027194608002901077, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,11,1,34 } };
const TfArray<1, float> quant27_scale = { 1, { 0.027194608002901077, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,374 } };
const TfArray<1, float> quant28_scale = { 1, { 0.027194608002901077, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,12 } };
const TfArray<1, float> quant29_scale = { 1, { 0.15514771640300751, } };
const TfArray<1, int> quant29_zero = { 1, { 42 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,12 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 704, (TfLiteIntArray*)&tensor_dimension0, 697, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 34, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 4488, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 697, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 752, (TfLiteIntArray*)&tensor_dimension17, 738, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 738, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 752, (TfLiteIntArray*)&tensor_dimension19, 738, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 738, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 752, (TfLiteIntArray*)&tensor_dimension21, 378, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 378, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 720, (TfLiteIntArray*)&tensor_dimension23, 714, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 714, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 720, (TfLiteIntArray*)&tensor_dimension25, 714, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 714, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 720, (TfLiteIntArray*)&tensor_dimension27, 374, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 374, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension29, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
