/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 07.02.2021 00:16:27

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 2640;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1062 } };
const TfArray<1, float> quant0_scale = { 1, { 0.040656760334968567, } };
const TfArray<1, int> quant0_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 480, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[16] = { -17, -44, -43, -32, -27, -68, 25, -48, -68, -11, -36, -127, -116, -4, -9, 3, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0032268913928419352, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[32] = { -106, -103, -36, -85, 43, -75, -127, -77, 16, -111, -19, -20, 71, 30, 28, 10, 48, 11, -89, -100, 4, -33, -127, 71, 93, -120, 61, 60, 45, 76, -86, -93, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0013336156262084842, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[11] = { -12, -1353, 903, -541, -1896, -301, -372, -424, 600, -420, 5256, };
const TfArray<1, int> tensor_dimension4 = { 1, { 11 } };
const TfArray<1, float> quant4_scale = { 1, { 7.6045587775297463e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[11*480] = { 
  -20, 3, -4, 34, -53, 23, -8, 8, -3, 22, -43, 8, -17, -13, 16, 23, 0, 1, 31, 17, -13, -2, -37, -11, 13, 23, 8, 20, 20, -25, -11, 16, -14, -2, -2, 24, -7, 15, -20, 1, 11, 23, -40, 5, -21, 20, 27, 21, 8, -4, 18, 5, 11, 6, 5, 22, 9, 12, 1, 11, 12, -24, -5, 12, -2, 2, 6, 9, -1, 8, 0, -22, 29, -9, -39, -4, -20, 18, 5, 16, 3, -8, -2, 10, 21, 24, -1, 16, 2, 13, -11, -3, 16, -25, -4, 8, -7, 17, 7, -4, -1, -3, -25, -21, 17, -27, -24, 7, -17, 32, 10, 9, 8, -10, -13, -3, 0, 26, -1, 12, 8, 17, -10, 4, 4, -12, -18, 4, -2, 4, 13, -7, -7, -37, -3, -56, 23, -51, -1, -5, -13, 11, 6, 1, 15, -18, -15, -4, 6, 10, 1, 12, 12, 17, -25, 13, -5, 6, -5, -5, -10, 6, 9, -22, 0, -44, 1, -75, 16, -66, -4, -13, 0, 9, -2, -1, 31, -23, -13, -9, 10, 30, 2, 23, 1, -1, -24, 16, 11, -21, -10, -20, 8, 10, 10, -8, -8, -70, 20, -73, 30, -43, -8, -14, -4, -6, 0, -5, 13, 4, -39, -21, 22, 6, -11, 20, 13, 6, -16, 0, 3, -7, -19, -1, 17, 19, -11, -16, 2, -72, 5, -93, 18, -49, -6, -22, -1, -3, -14, -13, 9, -4, -25, -37, 22, 5, -7, 18, 12, -3, 7, 5, 15, 13, 0, -17, 26, -5, -22, -3, 2, -81, 1, -86, 23, -32, 13, -29, 4, -15, -7, -27, 23, -18, -53, -54, 17, -19, -18, 15, 32, -43, 0, -8, 7, 16, -16, -61, 6, -39, -20, -12, 0, -45, -9, -57, 23, -23, 8, -29, 12, -18, -7, -50, 30, -25, -27, -47, 17, -4, -20, 32, 23, -56, -10, -5, -24, 8, -7, -60, -20, -31, -29, -18, 3, -21, -40, -5, 30, -10, 17, -16, 15, -20, -25, -31, 46, -8, -5, -24, 19, 0, -39, 21, 64, -47, -1, -14, -19, 17, -11, -23, -4, -9, -27, -16, -24, 9, 0, -7, 6, 4, 26, -17, 21, -49, -19, -27, 29, -16, 10, -2, -35, -16, -34, 34, 45, -23, -31, -16, -34, -11, -5, -5, 14, 5, -32, -26, -5, 5, 29, 15, -32, 11, -19, -7, 9, -23, -30, -32, 29, 3, 15, -1, -28, -9, -36, 23, 41, -17, -27, -36, -22, -6, -2, -1, 19, 9, -26, -30, -22, 0, 17, 10, -53, 23, 0, -7, -16, -29, -27, -64, 4, 0, 21, 13, -16, -40, -22, -6, 2, -24, -48, -80, -13, -1, -75, 18, 33, 11, -66, -15, -14, 2, 29, 12, -25, 18, 10, 6, -16, -41, -21, -25, -2, 10, 35, 1, -8, -53, -10, -24, 6, -29, -67, -77, -32, -11, -29, 16, 
  32, 25, -40, 21, -29, 7, 28, 1, -10, 34, 61, -75, -46, -52, -10, -46, -27, 31, 20, -7, 30, -67, -5, 25, -8, -50, -70, -111, 24, -52, -34, 14, 28, 16, -6, -45, -7, -5, 20, -1, -4, 36, 29, -66, -11, -61, -30, -11, -48, 5, -23, -10, 17, -44, -1, 11, -13, -76, -11, -60, -14, -55, 10, 16, 30, 7, -1, -55, -4, -20, 34, -5, 10, 29, 25, -37, 8, -47, -44, -5, -52, -20, -39, -15, 22, -17, -18, 0, -25, -69, 19, -23, 1, -17, 33, 12, 33, 19, 0, -7, 0, -14, 14, -3, -7, 18, 17, -6, 4, -1, 6, -6, -40, -28, -26, -28, -5, -5, -8, -16, -25, -18, 33, -1, -16, -27, 13, 2, 25, 1, 13, 16, 9, -18, 33, 9, -8, 25, 17, 2, 27, 3, 21, -4, -36, -25, -25, -14, -8, -10, 12, -16, -25, -10, 14, 5, -22, -30, 28, -18, 9, 8, 10, 22, 2, 6, 13, 6, -19, 31, 7, 23, 9, -6, 3, -11, -20, -47, -16, -12, -4, -1, 9, -4, -32, -3, 25, 19, -17, -26, 9, -26, 34, -2, 15, 24, -26, 7, 6, 8, -3, 30, 0, 4, 1, -1, 9, -6, -15, -38, -11, -21, -14, 4, -37, -5, -26, 3, 8, 11, -14, -19, 2, -15, -7, 1, 22, 11, -4, 25, 7, 30, -10, 24, 12, 3, -3, 2, 11, 5, -28, -17, 6, -1, -18, 7, -32, 0, -21, 14, 24, 20, 10, -13, 18, -6, 19, -2, 34, 14, 5, 45, 28, 41, -15, 26, -2, 4, -1, 1, 11, 14, -18, -22, -16, -4, -28, 18, -7, -29, -31, 6, 30, 8, 11, 4, 21, 5, 23, 3, 38, 13, 2, 30, 34, 23, -49, 9, 10, -1, 4, -3, 17, 14, -22, -11, -4, -7, -37, 34, -2, -51, -68, 14, 33, 16, 6, -1, 27, 11, 40, 31, 44, 9, 11, 3, 20, 19, -45, -16, 5, 15, -8, 10, 2, 16, -46, -13, -17, -2, 3, 38, 4, -18, -63, 7, 47, 26, -3, 29, 17, -10, 14, 11, 23, 13, 11, 8, 2, -4, -10, -14, 12, -7, -19, 9, 11, 23, -34, -33, -11, -8, -24, 34, 19, -14, -46, 13, 36, 40, 3, 8, 21, -1, 13, 2, 14, 2, 9, 9, 13, 11, -31, -17, -21, 1, -4, 21, 6, 22, -36, -18, -12, -10, 15, 20, 14, -8, -33, 14, 27, 14, -7, -2, 13, -7, 4, -4, 39, 0, 9, -3, -12, 3, -36, -3, -14, -2, -10, 7, 10, -9, -29, -16, -7, -2, -13, 6, 12, -19, -24, 7, 15, 13, -28, 0, 6, 11, 1, -10, 38, -5, 21, -5, -19, 3, -38, -8, -5, 3, 9, 2, 15, 21, -13, 0, -11, -14, -39, 4, 18, -24, -17, -4, 29, 7, -18, 13, 32, 1, 
  -11, 10, 5, -78, 63, -22, -9, -5, 17, 12, 27, -47, -17, -8, -35, -3, 3, 32, -35, -8, 7, 26, 28, 11, 31, 3, -70, -3, -14, 32, -54, -14, -13, -3, 16, -28, 41, 3, -18, -13, 16, 32, -3, -31, -17, 14, -1, 19, 5, 5, -14, -30, 7, 15, 19, 18, 8, 4, -62, 13, -20, 38, -35, -11, -5, -4, 19, -19, 16, -25, -12, 14, 31, 7, -23, -8, -45, 4, -6, 15, 3, -15, -10, -23, 17, 29, 3, 12, 5, -9, -69, 1, 2, 31, -48, -24, -10, 14, 20, 17, 14, -23, -35, -6, 21, -28, -16, -2, -40, 26, 9, 4, 9, -22, -26, -46, -3, 29, 1, 12, 11, -4, -51, 5, -1, 28, -54, -26, -10, -2, 30, -19, -2, -29, -19, -50, 26, -59, 10, -31, -44, 7, -5, 10, 25, -37, -33, -35, 6, 16, -1, 16, 16, -9, -55, 13, -2, -1, -25, -42, -20, -2, 28, -52, -6, -65, -16, -69, 24, -41, 17, -23, -36, 7, -28, 15, 40, -41, -16, -29, 14, 41, -18, 24, 7, -21, -38, 9, 20, -44, -24, -44, -3, -2, 34, -44, -40, -33, -3, -65, 36, -23, 20, -16, -24, -1, -18, 11, 23, -32, -18, -32, 22, 13, -43, 30, 22, 0, -42, -5, 20, -35, -23, -13, -3, 14, 27, -24, -34, -33, -20, -10, 26, -20, 2, -19, -28, 13, -14, 7, 22, -34, 24, 7, 26, 17, -35, 30, 23, 8, -26, -6, 29, -51, -10, -8, 3, -6, 25, -1, -62, -17, -19, -2, 33, -12, 8, -13, -15, -8, -6, 9, 24, -21, 17, 13, 12, 7, -46, 26, 38, -6, -31, -26, 38, -31, -29, -1, -29, -14, 30, -9, -71, -18, -11, -9, 31, 5, -3, -14, -16, -3, 1, -10, 11, 9, 42, 24, 28, 27, -51, 35, 25, -20, -23, -24, 24, -33, -21, 1, -26, -11, 31, -18, -25, -26, -30, -5, 38, 7, 1, -3, -3, -6, -3, 0, 5, 41, 32, 23, 24, 30, -45, 49, 48, -19, -21, -34, 33, -13, -32, 2, -13, -20, 44, -1, -20, -5, -20, -11, 51, 10, -1, -22, -27, -18, 8, 33, -3, 17, 30, 17, 46, 12, -25, 28, 27, 1, -46, -36, 7, -21, -35, 5, -1, -11, 12, -8, -14, -10, 3, 6, 3, 4, -31, -8, -11, -10, 7, -6, -49, 30, 27, 6, 33, 24, -18, 39, -27, -1, -42, -46, -4, -17, -41, 9, -25, -21, 38, -18, -35, -14, -13, 4, 44, 10, -36, -19, -15, -15, 25, 40, -10, 20, 27, 12, -9, 8, -12, 3, 26, 3, -39, -43, 0, -21, -45, 23, -23, -34, 42, -6, -42, -31, -1, -2, -1, 0, -1, -29, 26, 8, 14, 44, 22, 25, 29, 1, 0, 33, -29, -15, 26, -41, -17, -6, 20, -10, 6, 5, 
  24, 30, -23, 19, 19, 4, 15, -11, 21, -22, -32, 0, -64, 5, -4, -24, -41, 39, -7, -18, 31, -15, 64, 1, 13, 33, 16, -17, 14, 6, -49, 22, 25, 21, -6, 20, 11, 4, 11, -10, 12, -21, -33, 10, -32, 12, 17, -10, -46, 18, -12, -24, 19, -15, 39, -6, -7, 24, -3, -14, -4, 8, -32, 32, 27, 14, -9, 18, 10, -2, 24, 21, 25, -21, -19, 7, -14, -3, 4, -2, -36, 7, -10, -17, 22, -1, 16, -12, -20, 7, -19, -28, 9, 8, 18, 27, 27, 27, -12, -15, 10, -3, 6, 31, 4, -16, -2, -3, 38, 8, 0, -7, -35, 10, -26, -19, -2, -14, 22, -19, -15, 2, 2, -11, -6, 6, 15, 23, 26, 19, -18, 3, 25, -7, 33, 19, 10, -11, 13, -24, 43, -15, 9, -16, -42, 4, -24, -27, 4, -36, 29, -18, -15, -16, 21, -1, -12, -7, 32, 17, 25, 30, -45, 7, 16, -8, 38, -11, 3, -18, 16, 14, 28, -12, -2, -14, -32, -6, -21, -25, 11, -24, 31, -13, -34, -22, 37, 16, 4, -10, 19, 15, 38, 13, -17, 26, -1, -35, 24, -44, 9, -15, -4, 4, 23, 10, 3, -15, -43, -2, -30, -29, 12, -32, 19, -39, -16, 2, 12, 10, -7, -24, 9, 27, 24, 23, -26, 1, 3, -41, 8, -28, -1, -55, -5, -6, 20, -1, -1, -20, -26, -10, -15, -8, 13, -27, 15, -30, -24, 14, 28, 17, -11, 3, 26, 2, 23, 5, -22, 19, -9, -28, 7, -32, 3, -40, 19, 8, 28, -7, 4, -13, -28, -26, -16, -9, 7, -49, 14, -19, -16, 1, 33, 1, 7, -14, 25, -4, 7, 17, -12, 15, -34, -36, 18, -26, -3, -32, 26, -5, 44, -9, 11, -22, -37, -24, 16, -9, -3, -49, -14, -16, -41, 1, 27, 3, 10, -15, 28, 2, 30, 11, -9, 3, -25, -3, 3, -3, -9, -25, 38, 20, 50, -1, -12, -29, -48, -15, 0, 7, 20, -43, -28, -25, -48, -2, 42, 2, -2, -12, 16, -10, -7, -9, -16, 7, -29, -2, -9, -1, -31, -18, 25, 7, 24, -9, -8, -16, -71, -31, -1, 0, 10, -51, 2, -10, -98, 11, 31, 15, -7, -16, 26, -9, -17, -24, 8, 2, -27, 0, 4, 12, -63, -5, 7, 12, 32, 9, -17, -4, -65, -18, -2, -2, -30, -30, -35, -55, -104, 17, 34, 1, -15, -19, 36, -3, -34, -34, 6, -5, -32, -17, -22, 0, -80, -8, -17, 1, 15, 21, -7, 13, -71, -13, 7, 6, -51, -23, -38, -63, -125, 8, 26, 3, -4, -15, 24, 11, -34, -49, -12, 9, -41, -24, -23, -12, -80, -17, -6, -4, 36, 6, 2, -5, -44, -6, 5, -5, -69, -6, -43, -87, -77, -11, 42, 26, 3, -21, 14, -14, 
  -9, 10, -3, 0, 11, 11, -7, 5, -110, 18, 29, 7, 49, -43, -15, 6, -57, 14, -9, 21, -90, -51, 14, -97, -111, 4, 33, 19, -67, 4, 31, -9, -11, -1, -9, -11, 20, 30, -1, 14, -66, 40, 36, 16, 29, -18, 3, 23, -2, 3, 3, 17, -90, -38, 5, -66, -31, -2, 30, 2, -69, -14, 27, 1, -15, -11, -2, -20, 20, 26, -2, 57, -11, 49, 17, 7, 28, -20, -13, -8, 5, -6, 10, 34, -38, 0, -19, -27, -13, -9, 7, -11, -49, 8, 27, -19, -17, -5, -30, -15, 36, 29, -21, 32, -1, 55, 18, 2, 27, -4, -6, -4, 18, -4, -12, 23, -44, 8, 6, -25, -2, 7, 6, -4, -50, 0, 12, -14, -11, -3, -39, -3, 16, 12, -1, 18, -3, 33, 12, -20, 49, -13, -6, -14, 16, -3, -19, 22, -22, -8, 10, -19, 6, 2, 7, 7, -67, -3, 15, -23, -20, 2, -24, 14, 31, -2, -10, 3, -7, -3, -6, -13, 35, -9, -15, -34, 23, -21, -20, 2, -24, 8, 23, -14, -13, -6, 3, 13, -64, 7, 16, -10, -19, 3, -21, 14, 23, -13, -8, 9, 9, 2, 18, 3, 10, 8, -4, -37, 10, -2, -25, -1, -12, 1, 5, -18, 12, 26, -38, -6, -57, 2, -4, -3, -23, 11, -37, 14, 20, 14, -24, 1, 3, 9, 6, 0, 27, 29, -4, -34, 11, -14, 8, 13, -9, 1, 14, -13, 10, 31, -27, -4, -40, 18, 4, 10, -19, 3, -46, 37, 6, 28, -22, 14, 13, -8, 16, 4, 2, 14, -2, -9, 4, -35, -3, -1, -23, -8, 10, -10, 16, 27, -23, -27, -14, 6, -5, 8, -32, 17, -15, 31, -8, 26, 0, 21, 1, -2, 2, -3, 3, 9, -9, -15, 3, -33, 27, 0, -35, 13, 21, -25, 4, 28, -18, -5, -29, -18, -12, 23, -10, 37, -27, 11, -6, 6, 0, 19, 1, -4, -41, 8, -36, 7, -23, -18, 2, -17, 27, 8, -21, 13, 4, -17, -2, 18, 4, -2, 2, -10, -20, 17, 6, 28, -27, 13, -31, 17, 17, -4, 7, 2, 31, -17, -9, 6, -24, -5, 14, -36, 21, 5, -28, 14, 6, 7, -12, 36, -26, -11, -5, -44, -14, 22, 19, 29, -43, 1, -10, 5, 29, 12, -25, -11, 12, -1, -6, 6, -43, -15, 14, 3, 19, 3, -15, -20, -11, -11, 30, 31, -42, -45, 6, -43, 15, 18, 20, 17, -39, -10, -9, 3, 13, 6, 8, 8, 30, -9, 20, 11, -52, -30, 21, 1, 24, 6, -4, -9, -7, 21, 46, 21, -98, -89, -21, -31, -9, 24, 23, 14, -43, -11, -6, -1, 20, 3, 39, 1, 20, 15, 13, 20, -37, -77, 17, -11, 25, -9, 16, 24, -13, -3, 22, 23, -127, -64, -16, -30, -27, 18, 
  -36, 2, 26, -100, 29, 74, -20, 61, 0, 50, -19, 27, -91, -43, -75, 7, 2, -8, -29, 18, -14, 13, 11, -9, 14, 12, -69, 0, -14, 67, -13, 4, -21, -16, 33, -70, 23, 51, -18, 44, 3, 50, -11, 15, -39, -7, -24, 33, -7, 0, -48, 17, 3, -2, -7, 9, 3, -2, 8, 13, 1, 27, 29, -17, -14, -15, 24, -34, 2, 64, 0, 27, 21, 9, -11, -5, -11, 7, 10, 14, -1, -2, -15, 25, 16, 16, -21, 11, -5, 3, 15, 2, 19, -1, 38, -22, -13, -18, 14, -3, 2, -2, -28, -10, 6, -17, -36, -7, -13, 13, 31, 11, -30, 13, 0, 6, -8, 12, -22, -4, -8, 13, 29, 6, 10, 1, 21, -27, -24, -52, 16, 10, -56, 52, -34, 8, 0, 9, -48, -31, 12, -2, 30, 16, -49, 27, 17, 20, -12, -7, -59, -54, -18, -30, 11, 21, -10, -30, 34, -18, -49, -52, 30, -4, -21, 28, -25, 20, -43, 24, -28, -13, 3, -6, 6, 20, -39, 6, 13, 12, -43, 12, -39, -57, -50, -49, 16, 26, -4, -20, 30, -23, -6, -15, 33, -7, -10, 29, -5, 38, -50, 35, -17, -12, -10, -32, 19, 25, -45, 7, 9, 22, -56, 4, -41, -61, -80, -33, 6, 12, -19, -21, 16, -13, -4, 11, 29, -12, 6, 37, 13, 31, -78, 50, 1, -4, -1, -19, -1, 28, -39, 12, -8, 18, -77, -18, -1, -85, -90, -19, 12, 14, -40, 5, 21, 6, 10, 7, 2, -10, 10, 46, 13, 28, -99, 32, 0, 7, -8, -28, -5, 31, -41, 1, -30, 10, -83, -33, -8, -101, -78, -11, 11, -8, -20, -11, 24, -8, 7, 20, -3, -16, 2, 33, 25, 21, -115, 9, -10, -2, -24, -20, -12, 2, -37, -21, -11, 3, -87, -39, 2, -86, -78, -9, -14, -17, -27, 0, 10, 9, 16, 34, -32, -21, 14, 13, 12, 26, -86, 5, -7, 9, -29, -28, -41, -17, -19, -28, -21, 10, -69, -61, 2, -63, -89, -6, 11, -45, -34, -2, -47, 2, 0, 15, -84, -3, 2, 23, 10, -1, -77, 7, -8, 0, -36, -20, -30, -72, -11, -58, -10, 2, -69, -82, 9, -47, -85, 7, -44, -92, -27, -4, -70, -5, 9, 10, -48, -11, 9, 16, 13, 14, -41, 1, -39, 14, -17, 2, -47, -37, -21, -62, -6, -5, -40, -60, -8, 10, -54, 15, -75, -97, -52, 16, -59, -13, 2, 13, -73, -15, 1, 10, 8, 10, -60, 19, -29, 4, -52, -4, -62, -80, -1, -64, -5, 3, -28, -65, 4, -6, -17, 5, -89, -91, -43, 9, -89, 4, 9, 8, -72, -7, 8, 11, 5, 11, -24, 18, -20, 20, -36, -22, -57, -56, -11, -73, -5, -14, -24, -21, -1, -2, -18, 3, -88, -104, -45, 19, -69, -11, 
  -65, -38, 21, 54, -98, 13, -40, 10, -25, -11, -96, 24, -16, 15, 27, 14, -54, -25, 38, -9, -58, 20, -61, -48, -17, 26, 41, 33, 21, -15, 0, -10, -21, -31, 22, 26, -76, 34, -29, 17, -1, 21, -57, 27, -3, 20, 23, 24, -12, -24, 20, -23, -12, 4, -36, -8, 2, 13, 29, 14, 11, -34, 11, -28, -24, -18, 18, 20, -71, 31, -8, 18, 18, -20, -21, 12, -11, 7, 8, -1, 0, -20, 11, -26, 8, 14, -41, 0, -5, 1, 13, 1, 16, -30, 18, -27, -19, -10, -1, 20, -42, 14, -38, 31, 5, -5, -8, 27, -12, 13, 18, 2, 23, -16, 6, -41, -19, 7, -29, -11, -3, -8, 19, 0, 11, -45, 5, -35, -13, -21, -1, 28, -17, -22, -18, 4, 3, -31, 5, -4, -6, -13, 15, 1, 18, 2, 19, -16, -3, -14, -21, -10, 0, -18, 5, 13, -1, -36, 16, -25, -14, -13, 13, 3, 4, 11, 1, 4, -5, -12, -7, -4, -23, -20, -12, -11, 20, -6, 26, -9, -3, 4, -12, 3, -15, -36, 0, 16, 4, -36, 14, -18, -4, -4, 31, -17, 8, 28, -2, 23, 1, 17, -9, -7, -35, -33, -6, 9, 5, 13, -8, 16, -1, -14, -8, -12, -6, -35, -14, 2, -4, -24, 6, 6, -6, 7, 17, -33, 21, 36, 1, 24, -18, 26, -6, -9, -32, -23, -16, 24, 19, 6, -13, 9, -3, -6, 5, -14, -4, -30, -14, 9, -6, 13, 6, 12, 17, -1, 18, -30, 18, 32, 10, 11, -13, 19, -13, -4, -29, -18, -16, 44, 14, -2, -48, 7, -11, -13, -1, -23, -13, -20, 1, -8, -1, -12, 14, -3, 15, 13, -3, -47, 16, 24, 22, 10, -24, 3, -12, -21, -30, -19, -27, 28, 23, 0, -39, -1, -18, -6, 23, -41, -15, -31, 18, 20, -27, -11, 33, 12, 28, 30, 7, -40, 35, 2, 19, 20, -32, -8, -24, -10, -42, -25, -32, -6, 9, 9, -24, 7, 8, 2, 27, -24, -6, -32, 25, 13, -18, 7, -3, 9, 25, 16, -30, -9, 26, 19, 19, -4, 0, -3, 6, -12, -72, -6, -1, 11, 17, -5, -13, 4, -7, 6, 30, 3, -6, -11, -27, -30, -28, -6, -53, 15, 30, 10, -34, -4, 40, 10, 24, 14, 20, -9, -10, 2, -64, -10, -11, -26, 14, 3, -1, -4, 30, 20, 26, 60, 49, 7, -41, -62, -26, 14, -84, 2, 25, 15, -33, 7, 31, 1, 17, 5, 40, 9, 3, -3, -37, -11, -5, -57, 56, -15, 2, 2, 25, -16, 26, 46, 24, -10, -42, -59, -10, 9, -106, 11, 24, 6, -60, 7, 47, -2, 13, 4, 18, -1, 19, 13, -19, -21, 17, -115, -4, -13, 14, -12, 30, -4, 32, 38, 17, -14, -49, -16, -6, 12, -23, -5, 
  -7, 8, -3, 3, -5, 35, -16, 11, -16, 10, 4, 30, 55, -1, -36, -2, -21, -51, -21, 8, -36, -2, 18, 2, -17, 42, 15, 4, -41, 43, 31, -11, -37, -12, -25, -8, -18, 30, -33, 6, -39, 14, -5, 18, 28, 2, 6, -4, -13, -23, -28, 1, -53, -10, 6, -27, -25, 25, 9, -5, -35, 40, 26, -29, -36, -21, -5, -26, -19, 18, -19, 22, 0, 24, 3, 5, 14, -15, -11, -27, -34, -20, -17, 22, -43, 1, -15, -26, -17, 3, -17, -22, -36, 34, 18, -15, -40, -25, -23, -49, 11, 18, -32, 26, -12, 41, 0, 9, 8, -4, -8, 1, -28, 1, -9, 15, -35, 2, 9, -47, -17, -10, -34, -21, -12, 12, 0, -2, -46, -33, 2, -49, 3, 27, -24, 23, 8, 20, -5, -6, 25, -23, -11, -1, -24, 14, 3, 18, -15, 5, 5, -19, 3, -21, -37, -8, -13, 18, 9, -8, -56, -26, 16, -34, 17, 43, -33, 23, 8, 21, -6, 9, 10, -22, -18, 1, 8, 8, 11, 7, -20, 27, 19, 0, -9, -27, -34, 3, -20, 5, 16, 2, -51, -19, 25, -16, 16, 28, -23, 17, 23, 4, -29, 0, -8, -12, -2, 4, -16, 3, 13, 0, -1, 7, 3, -5, 21, -18, -25, 4, -17, 13, 0, -4, -37, -14, 15, -38, 23, 33, -32, 18, 20, 10, -28, -21, -16, 0, -3, 10, 1, -1, 19, 11, 1, 23, 7, 0, 16, -10, -8, 14, 0, 22, 15, -6, -28, -36, 16, -24, 11, 38, -41, 10, 27, 3, -25, -20, -30, -8, -7, 30, 8, 2, -9, -13, -5, 10, 2, 0, 33, -29, -7, 2, 11, 6, 17, -14, -56, -20, 29, -13, -1, 22, -26, 19, 24, -8, -37, -22, -41, -8, -7, 28, -1, 1, 12, -5, -6, 29, 10, -1, 24, -12, -11, 6, 10, -12, 5, 14, -31, 11, 42, -18, 10, 20, -20, 27, 26, -2, -58, -6, -58, -2, -31, 34, 6, 8, 18, 10, 7, 45, 6, 1, 23, -9, -12, 17, 19, 7, -11, 0, -15, 14, 44, -21, 9, 20, 6, 1, 52, 4, -35, -10, -48, 4, -18, 69, -2, -21, 6, 7, -2, 59, 7, 18, 10, 15, -7, 37, 11, -14, -7, 17, 19, 18, 59, -34, 21, 14, 21, 13, 34, -7, -61, 9, -29, 11, -16, 62, 16, 7, 1, -2, 16, 80, 16, 16, 35, 23, 13, 38, 20, 0, 10, 8, 31, 21, 80, -35, 18, 9, 15, 7, 35, 17, -26, 3, -13, 24, -23, 60, 18, -13, 0, 10, 25, 61, 12, 13, 5, 12, 14, 29, 7, -1, 24, 22, 40, 30, 43, -34, 22, 16, 29, 14, 24, 13, -7, 18, -13, 26, -23, 51, 21, -16, -6, -3, 32, 59, 31, 15, 30, 15, 19, 46, 19, 0, 36, 15, 
  23, 33, 12, -8, -36, -51, 19, -46, 19, -6, 68, -42, -31, 5, 15, 20, -11, 30, 25, -6, 36, 5, -9, 37, 28, -7, 0, -22, 65, -45, -55, 2, 25, 24, 15, -36, -21, -26, 13, -24, 18, 32, 44, -46, -65, 4, -3, 23, -14, 19, 23, 3, 24, -3, -25, 23, 4, -20, -62, -27, 19, -41, -87, 7, 24, 19, 21, -76, -5, -27, 32, -8, 37, 9, 38, -13, -87, 6, -42, 28, -14, 15, 21, 12, 31, 11, -25, 19, -4, -14, -82, -34, 32, -34, -92, 6, 22, 34, 20, -67, -1, -32, 7, -5, 17, 23, 25, 1, -79, 31, -9, 12, -8, 25, 10, -7, 8, 12, -13, 16, 3, 7, -76, -24, 23, -21, -91, 11, 7, 8, 31, -1, 3, -34, 18, 4, 20, 2, 18, -8, -74, 9, -23, 15, -22, 25, 11, 8, 8, -5, -11, 11, -5, 4, -77, -21, 22, 2, -65, 5, -12, 8, 30, -1, 1, -9, 2, 8, 9, 1, -6, 17, -71, 10, -3, 15, -21, 15, 19, 6, 8, 20, -18, 13, -19, -1, -41, -18, 16, 14, -64, 4, 0, -7, -4, 12, -18, -25, -15, -4, 28, 12, -35, -5, -65, 2, -6, -4, -1, -3, 20, -6, 2, -8, -39, -9, -6, 8, -60, -9, 20, 10, -87, 14, -17, -1, 5, 7, -13, -33, -16, -22, 7, -22, -43, 10, -39, 2, -4, -15, 6, 14, 23, 0, 6, -14, -10, 4, -22, 11, -32, -12, 20, 4, -77, 6, -8, -18, -52, 31, 11, -53, -31, -37, -8, -25, -17, 3, -3, 1, 0, -48, 12, 5, 1, 2, 19, -38, -4, -15, -6, 20, -26, -20, 15, 18, -62, -6, -47, -32, -76, 25, 22, -70, -39, -50, -16, -58, -24, 5, 21, 26, 28, -91, 24, 15, 1, -11, 9, -38, 17, -10, -18, -1, -20, -10, 9, 29, -41, -20, -69, -71, -107, 15, 46, -37, -92, -24, -36, -49, -29, 15, 26, 0, 19, -111, 21, 35, -13, -8, -38, -59, 13, -45, -25, -1, -12, 2, -23, 50, -55, -47, -79, -86, -88, 17, 37, -61, -101, -52, -73, -58, -8, -6, 26, 4, 17, -70, 29, 13, -21, -20, -87, -77, 12, -37, -24, 4, -14, 11, -44, 36, -41, -73, -89, -103, -64, 8, 64, -60, -95, -42, -82, -63, -25, 16, 56, 8, 15, -70, 20, 14, -28, -41, -93, -33, -1, -40, -24, 0, 5, 12, -34, 52, 5, -63, -108, -108, -68, 12, 33, -65, -113, -41, -49, -61, -34, 15, 63, 33, 18, -70, 43, -16, -22, -23, -109, -49, -3, -46, -33, 5, 18, 18, -12, 60, 7, -67, -73, -102, -69, 23, 3, -56, -108, -42, -30, -77, -12, -13, 58, 28, 43, -26, 28, 6, 0, -28, -50, -2, -12, -62, 11, -22, 44, 42, 14, 45, 19, -64, 
  -13, -14, -24, 46, -47, -4, -10, -8, 19, 6, -43, -15, 1, -22, 11, -9, 34, -1, 23, -13, 14, 12, -30, 22, 28, -11, 23, 14, 4, -29, -26, -12, 16, 13, -26, 42, -8, -49, 5, -65, 14, -28, -30, -10, 5, 22, 32, -5, 25, -20, -2, -25, 20, -3, 17, 20, 7, -9, 13, 7, 1, -35, -15, 4, 27, 15, -27, 24, 7, -43, 34, -74, 30, -57, -22, -18, -6, 13, 4, -2, 5, -30, -20, -27, 27, 7, 12, 15, -2, -4, 13, -9, 18, -15, -14, 14, 23, 28, -19, -3, 20, -15, 12, -51, 16, -46, -26, 10, -23, 30, 4, -17, 4, -23, -42, -24, 2, 9, 21, 9, 3, 7, 16, -15, 0, -5, -36, 12, 17, 16, -12, -28, 11, -19, 27, -67, 21, -37, -2, 2, 13, 9, -11, -20, 7, -33, -43, -24, 7, -2, 23, 8, 6, 9, -4, -10, -9, -15, -1, 7, 11, 24, -10, -36, 20, -17, 30, -54, 14, -26, -12, 13, -3, 7, -18, -10, 16, -37, -27, -19, 12, 16, 25, 17, -7, 4, 27, 5, 5, -25, 0, 1, 21, 14, 1, 26, 9, -37, 28, -56, 21, 9, -16, -1, -16, 7, 1, -4, 11, -8, -16, -24, 15, -3, 16, 8, 8, 21, 18, 14, -4, -11, -12, 26, 15, 21, -5, 1, 21, -20, 14, -40, 12, -13, -17, -9, 0, 8, 10, -4, 5, 0, -8, 2, 13, 0, 25, 8, 1, 18, 32, 26, 0, -7, 11, 12, 15, 4, -7, 14, 13, -46, 17, -61, 11, 6, 12, -19, 11, -8, 12, 12, -3, -2, -10, -3, 5, -20, 22, 3, 16, 4, 26, 11, 17, -23, 0, -4, -7, -9, -16, -4, 0, -86, 19, -73, 14, -5, 19, -28, 20, -5, 11, 12, 1, -4, 7, -17, 11, -6, -2, 6, 1, -32, 17, 7, 19, -35, 2, -25, -15, -26, -10, -20, -19, -36, -22, -37, 19, 0, 26, -25, 30, -25, -20, 22, 11, 8, 9, -12, 7, 5, -36, 0, 3, -41, 24, 3, 20, -21, 0, -23, -20, -34, -6, -10, -62, 2, -8, -12, -3, 0, 20, -31, 10, -40, -10, 35, -17, -13, 12, -14, -2, 4, -34, 3, 32, -28, 14, 22, 16, -55, 17, -28, -15, -23, 27, -15, -46, 3, 1, 10, 5, 6, -17, -22, 9, -19, -13, 30, -34, 0, 11, -13, -6, 13, -38, -22, 5, -37, 26, 14, 25, -38, 24, -19, -10, -27, 24, -5, -42, -8, -9, 5, -8, 15, -11, -25, -23, -4, -1, 57, -44, -4, 15, 2, -4, 10, -9, -8, -10, -24, 25, 13, 31, -23, 7, -2, 0, -24, -3, 8, -38, -15, 4, 6, -36, 8, -8, -27, 0, -10, 10, 39, -53, 4, 28, -7, -36, -8, -15, -21, -2, -39, 26, 21, 39, -24, -1, -12, 
  -64, -14, -54, 0, -1, -61, -38, -57, -56, -62, 2, 5, 3, 34, 35, -38, 14, 52, 5, -10, -24, -36, -18, -41, -52, -6, 10, 17, 11, 24, -17, -13, -42, -14, -84, 3, 16, -25, -20, -25, -75, 3, 1, 43, -3, 11, 27, -42, -30, 29, 13, 14, -32, -71, -25, -54, -69, -8, -11, -14, -25, 35, -26, 14, -37, -22, -39, 1, -2, -18, -8, 3, -44, 4, 11, 36, 17, 6, 24, -31, -55, 31, 20, 47, -27, -54, -46, -68, -75, -6, -19, -19, -5, 27, -18, 26, -54, -14, -38, 12, -5, -37, -24, 5, -41, -4, -1, 50, 4, 15, 32, -34, -23, 41, 21, 30, -45, -25, -37, -77, -53, 11, -23, -2, 1, 32, -28, 26, -44, -26, -28, 24, 4, -37, -21, -2, -63, 1, -19, 37, 25, 6, 35, -8, -26, 45, 17, 41, -34, -42, -42, -65, -68, -5, -9, 26, 17, 28, -22, 11, -35, -16, -43, 32, -2, -17, -5, -12, -64, -21, -9, 32, 8, 24, 27, -21, -1, 23, 19, 25, -49, -34, -41, -60, -69, 14, -15, 25, 6, 24, -29, 18, -16, -13, -19, 34, -6, -19, -5, -7, -57, 15, -16, 45, -14, 28, 38, -48, 3, 18, 22, 36, -40, -38, -49, -81, -55, 27, -17, 8, 20, 24, -33, 27, -44, -6, -29, 12, -11, -35, -28, -40, -56, -35, -17, 27, -28, 37, 29, -25, -23, 17, 29, 37, -29, -47, -40, -72, -59, 32, -10, 17, 17, 22, -15, 17, -33, -14, -18, 21, -6, -21, -23, -32, -52, -35, -3, 47, -10, 21, 31, 3, -15, 21, 3, 27, -33, -35, -47, -70, -67, 24, -10, 14, 26, 14, -39, 20, -53, -11, -39, 18, -17, -30, -14, -23, -49, -33, -21, 50, 1, 29, 19, -21, 0, 39, 33, 35, -42, -28, -43, -80, -68, 28, -15, 14, 22, 18, -30, 32, -21, 12, -23, -3, -6, -45, -20, -11, -51, -39, 4, 38, 19, 30, 9, -10, -10, 48, 19, 48, -23, -42, -38, -73, -61, 12, -34, 13, 9, 9, -36, 23, -13, 4, -41, 3, -10, -37, -1, -48, -53, -32, -3, 21, -23, 31, 18, -26, -28, 21, 19, 33, -32, -40, -39, -65, -58, 26, -19, 11, 8, 16, -33, 21, -3, 10, -24, -2, 11, -53, 15, -34, -38, -46, -20, 34, 10, 13, 22, -14, 8, 45, 3, 30, -3, -25, -25, -64, -45, 15, -22, 14, 19, -1, -4, 24, 8, 5, -15, -14, 9, -57, -8, -46, -16, -32, -11, 29, 1, 44, 25, 7, -21, 48, -2, 27, 15, -35, -28, -46, -56, 4, -14, -2, 7, -4, -1, 28, 28, 2, -22, -15, 1, -55, 12, -48, -3, -51, 17, 5, 36, 22, 20, 4, -35, 46, -3, 2, 24, -43, -20, -3, -23, 2, -2, 26, 3, 5, 2, -4, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 11,480 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0032339461613446474, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 16 } };
const TfArray<16, float> quant6_scale = { 16, { 0.00016927451360970736, 0.000108319305581972, 0.00012842274736613035, 0.00012837830581702292, 0.00014146461035124958, 0.00011780868953792378, 0.00012428006448317319, 0.00012259412324056029, 0.00012643235095310956, 0.00012772963964380324, 0.00014985291636548936, 0.00012804461584892124, 0.00012653159501496702, 0.00014114186342339963, 0.00017294137796852738, 0.00014648516662418842, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*1*3*18] = { 
  /* [0][0][][] */ 31,-76,82,7,8,-3,-4,-9,-27,-4,12,-2,15,-27,-11,10,-10,20, -23,-28,88,12,-2,11,1,9,-20,-2,23,2,-8,20,3,10,11,5, 127,-105,17,-11,4,-3,10,7,-24,-4,28,-4,-15,-1,12,22,-8,4, 
  /* [1][0][][] */ 53,-73,-22,5,1,1,18,-5,87,13,-119,-11,24,-3,39,-72,36,-41, 36,-43,-54,0,-1,23,21,-4,62,-19,-127,4,2,-2,60,-51,43,0, 52,-46,-57,36,-18,-3,2,-18,87,-12,-98,-10,-1,-43,53,-68,22,-21, 
  /* [2][0][][] */ -39,-3,-127,-26,0,-7,8,-16,47,-12,-59,2,-8,-18,32,-61,57,-6, -55,32,-118,-11,-1,-13,-18,17,45,14,-26,-12,-9,-75,35,-57,46,-17, -31,1,-63,-6,-20,22,15,27,28,2,-20,11,-14,-70,47,-53,37,21, 
  /* [3][0][][] */ -126,-38,-62,-12,-2,7,5,22,-6,-34,34,21,21,-12,-43,3,4,-5, -73,-29,-92,3,16,22,-1,-35,-32,-2,-4,-9,-8,21,10,11,18,29, -107,-29,-127,23,11,29,22,17,-18,14,10,18,24,-28,-28,-19,-12,-19, 
  /* [4][0][][] */ 41,0,127,6,-26,14,1,-2,60,-1,12,4,7,8,-2,34,6,0, 75,-15,66,-8,5,-27,-5,1,31,-23,30,-16,-2,2,-3,25,-4,25, -2,119,125,6,-18,24,17,-21,40,15,14,-9,-18,31,18,72,7,39, 
  /* [5][0][][] */ 73,-39,-10,-4,2,-6,28,-1,28,-12,52,10,4,47,-94,127,-70,52, 62,-51,-24,-20,-9,9,-15,-5,20,-5,58,21,-26,28,-71,111,-55,63, 56,-24,-33,15,-1,-6,7,23,47,-4,48,6,15,35,-76,102,-34,51, 
  /* [6][0][][] */ -94,-127,-90,25,-18,-13,4,4,-6,2,-12,5,-19,-51,26,-28,-11,-5, -21,-115,-60,-16,4,-21,2,5,-32,-29,-36,-35,14,50,-30,-28,13,4, -92,-48,-24,-13,-18,4,0,21,-28,10,-29,-6,-28,-36,24,5,-8,36, 
  /* [7][0][][] */ -90,-25,-6,-9,-1,-29,3,4,-115,20,23,22,22,-33,11,-52,23,-3, 50,21,-27,-8,-30,23,20,-3,-127,14,19,0,-4,32,13,8,66,18, 9,-81,-75,12,-14,-27,13,19,-103,-28,-4,-22,-5,-26,15,-6,-19,33, 
  /* [8][0][][] */ 36,-59,-90,19,-9,17,24,-22,-68,-9,0,8,27,4,-34,36,-32,20, 5,-126,-28,-14,23,-25,-12,2,-43,27,-29,-6,-11,-12,-32,20,-19,9, 28,-127,-35,-10,-10,18,10,12,-68,-10,-21,5,-24,16,-25,31,10,-5, 
  /* [9][0][][] */ 1,37,61,-33,22,-27,7,19,12,3,4,-30,9,8,23,-25,-1,-38, 16,108,91,6,12,-16,31,26,-39,-23,-5,-15,36,36,26,-12,9,1, 65,127,96,35,0,26,-30,-34,3,0,8,26,-26,-2,0,-8,-5,-19, 
  /* [10][0][][] */ -81,10,-127,7,-9,16,4,-20,-39,9,5,1,-8,-26,-26,18,-15,19, -55,-35,-85,6,19,-19,-10,-6,-39,-9,-19,1,-7,-6,0,18,7,6, -33,-57,-56,-11,-15,-7,-14,7,-59,-4,16,-19,3,-24,-25,14,7,18, 
  /* [11][0][][] */ 76,81,-127,17,2,2,14,-6,-4,-10,32,-5,1,-27,15,7,-8,13, 64,52,-101,-3,16,8,13,18,-10,17,35,-6,16,-34,-3,3,3,-3, 55,55,-96,-8,-9,-11,-5,7,-1,8,27,-5,10,-16,-3,15,-1,9, 
  /* [12][0][][] */ 47,107,-127,3,0,15,6,-7,-57,-9,12,-5,6,-18,1,-43,-11,-23, 57,98,-93,1,-2,-12,-2,-17,-52,-12,18,19,-20,3,-2,-11,4,4, 28,89,-97,6,-9,12,-8,-4,-35,-17,19,-4,-5,6,-15,-23,-10,-22, 
  /* [13][0][][] */ -37,121,-20,-4,-27,9,2,4,-17,18,9,-3,-3,7,-20,1,22,-15, -72,69,-57,24,14,16,18,-28,-47,-6,-3,-23,-21,-9,-3,-19,30,-6, 4,127,17,2,1,-20,-3,23,-62,19,11,21,-9,10,-13,-24,29,-16, 
  /* [14][0][][] */ -127,0,9,1,11,14,-5,0,-24,-16,16,4,-12,10,17,-1,10,9, -114,81,8,3,-3,-15,6,-2,-12,17,-16,7,13,-2,11,5,2,-10, -98,72,32,4,8,1,-4,4,-15,2,-12,-6,-16,5,23,5,1,13, 
  /* [15][0][][] */ -127,73,0,6,6,-5,19,-3,-5,-19,2,11,17,-31,5,-25,3,-9, -72,102,45,6,-1,6,-3,2,-26,-19,-2,-19,-8,-19,24,-22,22,0, 110,-57,83,-18,-21,-8,6,13,0,-5,15,4,0,7,25,-23,26,-1, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,18 } };
const TfArray<16, float> quant7_scale = { 16, { 0.004163502249866724, 0.0026642384473234415, 0.0031587057746946812, 0.0031576128676533699, 0.0034794854000210762, 0.002897640923038125, 0.0030568116344511509, 0.0030153442639857531, 0.0031097496394068003, 0.0031416581477969885, 0.0036858057137578726, 0.0031494053546339273, 0.0031121908687055111, 0.0034715472720563412, 0.0042536929249763489, 0.003602971788495779, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[32] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 32 } };
const TfArray<32, float> quant8_scale = { 32, { 9.4716961029917002e-05, 8.3176200860179961e-05, 8.4721425082534552e-05, 7.2521761467214674e-05, 7.5529504101723433e-05, 7.3995644925162196e-05, 8.5313724412117153e-05, 6.6151289502158761e-05, 6.6413820604793727e-05, 7.5369149271864444e-05, 7.0234433223959059e-05, 5.2509170927805826e-05, 7.884507067501545e-05, 5.0942209782078862e-05, 5.963743751635775e-05, 7.2821509093046188e-05, 7.0573514676652849e-05, 6.3523388234898448e-05, 5.9781505115097389e-05, 4.2539581045275554e-05, 7.4514340667519718e-05, 8.3179154898971319e-05, 7.5751828262582421e-05, 7.8507924627047032e-05, 6.662461964879185e-05, 6.3472572946920991e-05, 7.76231026975438e-05, 5.3353578550741076e-05, 4.6524586650775746e-05, 7.2381561039946973e-05, 0.00010557945643085986, 5.5448963394155726e-05, } };
const TfArray<32, int> quant8_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[32*1*3*16] = { 
  /* [0][0][][] */ -30,-28,-1,28,-81,31,-8,36,56,-72,39,50,46,-20,-45,-97, -20,-6,-19,-24,-127,-3,14,23,27,-115,41,22,18,-15,-56,-118, -41,-20,-16,2,-100,58,-18,17,50,-77,34,-1,25,-18,-87,-114, 
  /* [1][0][][] */ -68,-20,22,32,-127,-12,-21,10,18,-53,58,-14,68,26,2,-53, -60,9,30,-24,-121,53,-3,52,44,-52,-24,-16,-7,29,0,-68, -47,-14,25,30,-103,24,1,44,39,-89,64,21,24,33,-17,-60, 
  /* [2][0][][] */ -67,-23,-17,-127,-6,-10,-89,-28,-48,-2,-48,35,64,70,-35,-6, -32,-36,-24,-111,-1,-6,-110,-37,-49,34,-46,44,16,7,-22,-2, -29,-34,-58,-57,-5,-35,-58,-44,-50,15,-80,-15,41,58,-9,23, 
  /* [3][0][][] */ -38,-15,-5,25,-22,-48,47,10,-17,0,11,-66,-47,-12,127,15, -36,-7,-15,15,-8,-66,2,-14,-81,23,-26,-93,-52,28,-28,53, -55,-17,-14,2,-5,-88,-33,5,-77,32,20,-62,-41,23,81,22, 
  /* [4][0][][] */ 9,105,58,-23,-36,13,9,0,43,-6,-17,-21,-21,-53,-127,-84, 6,1,51,-35,-12,-1,3,-7,16,-21,-29,-37,-14,-58,-112,-51, 12,104,55,-25,-47,-19,26,-1,26,0,17,1,-29,2,-56,-37, 
  /* [5][0][][] */ -27,-20,52,74,-122,-1,48,-35,3,-84,65,-81,-97,-55,-12,-60, -44,6,34,9,-127,16,-5,15,1,-104,7,-84,-64,-66,23,-42, -58,37,29,81,-110,9,55,-28,5,-113,29,-17,-31,-60,-3,-69, 
  /* [6][0][][] */ 12,-8,8,-11,-82,63,1,21,32,-111,68,24,18,-13,-46,-58, 13,-34,1,33,-114,-2,-15,22,38,-105,31,7,22,-27,-53,-84, 8,-33,12,-9,-104,68,-1,40,21,-127,59,34,0,-3,-24,-107, 
  /* [7][0][][] */ -32,19,-21,93,-74,-18,65,4,-13,-118,48,-90,-62,-95,42,-39, -26,22,2,46,-92,-31,64,-4,49,-65,23,-98,-85,-83,-18,-62, -1,57,9,54,-127,12,13,20,32,-123,71,-60,-30,-102,22,-38, 
  /* [8][0][][] */ -75,61,28,-51,-51,-59,-34,37,-36,12,-20,97,50,21,-46,-30, -53,21,54,-59,-43,-28,-85,32,-33,-26,-31,28,-48,38,-100,-54, -65,-12,12,-66,-22,5,-88,-10,-13,12,-8,57,127,44,-96,-30, 
  /* [9][0][][] */ 12,-24,17,-21,-28,103,35,6,2,-48,40,-41,-84,-79,21,-53, 16,-24,-19,64,-34,15,38,-36,35,-78,-6,-21,-55,-127,13,-46, 39,-43,-15,14,-34,85,7,-14,28,-66,40,12,-7,-73,-28,-83, 
  /* [10][0][][] */ 20,-8,-47,-36,62,105,11,26,50,-12,-13,24,-14,-22,-109,-80, 30,-34,-54,-71,-39,101,-6,-21,8,-12,7,-15,9,-5,-127,-55, 11,10,-68,-79,26,90,-61,-26,54,11,-8,28,-12,6,-60,-52, 
  /* [11][0][][] */ -31,-5,52,62,-21,28,-23,-7,21,-67,73,-46,-81,-16,-19,41, -70,26,36,36,40,3,10,-3,-54,-16,44,-75,-88,27,-27,-64, -72,8,86,55,41,-17,-25,-64,-11,27,12,-67,-57,117,20,127, 
  /* [12][0][][] */ 52,-12,-7,-45,30,84,4,-44,5,1,-59,-45,-72,-16,-25,-14, 31,40,-22,-91,61,22,-45,-107,-42,46,-87,-50,-75,-21,-56,-45, -19,8,-38,-109,75,83,-79,-118,-32,1,-127,-36,-57,-33,-46,3, 
  /* [13][0][][] */ -44,-39,1,-24,-45,-34,1,-28,-59,-44,7,10,14,75,-4,127, -71,14,31,-25,23,-37,-33,91,-40,-18,-12,61,35,-2,40,62, -95,23,84,-14,-35,-45,1,20,-65,-46,53,-52,-49,79,32,47, 
  /* [14][0][][] */ 32,1,-69,-34,19,-127,36,16,-47,33,-29,-67,-64,36,60,118, -28,-8,-53,-24,28,-108,-29,65,-8,-9,-41,-49,-10,62,73,18, 47,22,3,-30,-5,-62,-12,14,17,-9,-21,-53,-12,19,16,6, 
  /* [15][0][][] */ -2,-27,-58,-127,-22,-28,-27,64,-12,44,-76,15,36,52,-31,15, -15,-43,-57,-79,-10,-21,-94,40,-82,21,-59,-40,72,81,-7,-3, -5,-62,-55,-28,2,-33,-55,-10,-102,41,-66,32,62,11,-16,-7, 
  /* [16][0][][] */ -25,81,-17,-85,7,-9,-127,-65,-95,21,-34,7,-22,17,-60,19, -11,27,18,-77,1,20,-29,-29,-75,8,-68,60,21,0,-92,-45, -23,48,84,28,-12,32,-33,18,-39,-28,26,56,-8,-19,-92,-42, 
  /* [17][0][][] */ 127,-9,-20,-13,-21,-47,18,16,60,1,-24,-13,-33,49,-6,58, 91,31,-21,-41,-16,-44,-14,86,18,6,-28,-18,14,-13,-59,56, 83,47,-21,-27,-2,-39,33,27,97,-49,-35,0,0,-23,-79,2, 
  /* [18][0][][] */ 59,-123,-28,-16,-20,7,-12,59,-24,-67,41,-20,17,72,49,-28, -7,-127,-67,26,-8,-5,19,43,9,-36,54,-42,-12,22,75,3, 87,-110,-79,45,-11,-18,17,38,18,0,11,-83,-53,50,32,21, 
  /* [19][0][][] */ 60,-47,65,112,-18,60,94,23,-30,3,77,-98,-81,91,-57,104, 127,-38,-3,-26,3,38,11,53,-50,36,46,-99,-55,52,-89,-13, 96,-69,35,55,-32,94,-17,-5,-20,12,47,-70,-50,-24,-101,83, 
  /* [20][0][][] */ -21,-9,-4,-2,-67,11,-44,79,3,-20,51,109,72,17,-90,-76, -25,-42,34,-25,-51,36,-49,22,5,-22,20,22,26,28,-108,-35, -5,-22,-6,-53,-18,5,-56,20,14,-24,11,12,46,21,-127,-38, 
  /* [21][0][][] */ -84,25,44,-42,-33,-53,-45,-29,-85,13,-70,33,31,27,-37,23, -81,-7,12,-88,-18,-47,-80,-9,-119,28,-43,-5,97,-14,-5,5, -65,15,48,-66,-25,-45,-127,-28,-59,41,-66,45,8,56,-16,-10, 
  /* [22][0][][] */ -43,68,52,-1,-127,-83,33,-7,33,-84,-16,-2,28,0,-54,-73, -35,51,13,-23,-119,-56,20,-3,18,-80,21,28,42,-6,-39,-45, -27,70,40,9,-75,-56,-6,56,19,-92,23,0,-4,-26,-70,-80, 
  /* [23][0][][] */ -63,-5,61,-27,-52,43,-56,-34,-54,-19,-6,68,35,29,-53,-57, -44,32,25,-36,-37,73,-79,-43,-14,-19,-25,29,38,38,-86,-56, -53,-39,42,-37,-27,24,-127,-38,-48,-17,-28,85,-25,28,-95,-32, 
  /* [24][0][][] */ -54,64,41,-58,-19,6,-54,7,-99,-9,-87,74,-43,11,-106,-17, -64,52,66,-71,-5,6,-88,-18,-66,21,-93,-6,107,-8,-127,-46, -50,64,20,-104,-17,-27,-71,12,-78,2,-77,97,73,1,-106,-52, 
  /* [25][0][][] */ -127,-17,79,1,-23,-81,6,-16,-32,-27,15,-5,14,99,18,-32, -82,-9,69,22,-52,-69,8,22,-23,-35,74,1,-17,-4,6,62, -98,-33,61,2,-28,-94,11,-24,10,-35,-5,-25,29,96,36,24, 
  /* [26][0][][] */ -49,-61,-117,-53,34,-1,-79,-108,-102,-4,-127,-57,-22,69,6,28, -68,-53,-67,-41,52,-33,-109,-39,-110,85,-71,-58,-38,32,42,11, -49,-66,-83,-81,6,-13,-64,-80,-91,7,-65,-69,-29,44,48,58, 
  /* [27][0][][] */ -26,15,-46,-46,38,-109,-32,43,-45,92,-127,-22,0,70,74,54, -37,-13,-2,-67,-38,-105,-45,15,-120,99,-75,-28,-11,14,-36,11, -32,-11,-7,-48,10,-88,-72,13,-59,17,-70,11,56,107,46,62, 
  /* [28][0][][] */ -20,-101,-64,-71,-2,4,-127,58,-24,-14,-6,29,90,38,76,-2, -7,-119,-86,2,-4,-4,-74,104,-37,-5,-12,124,-73,27,-45,-17, 26,-64,-99,-9,-7,-15,-16,37,37,-7,55,-60,56,22,108,-7, 
  /* [29][0][][] */ 27,127,-22,-29,10,-4,7,-56,-14,14,-4,-54,-52,-46,-30,26, 7,1,75,6,-13,-19,3,-22,7,-15,-4,-37,-42,-34,-19,-38, -15,65,56,5,-11,5,2,-34,-40,1,-39,-21,-18,-11,4,57, 
  /* [30][0][][] */ 18,-22,-19,-127,47,-16,-84,-24,-9,2,-81,-5,1,13,-60,-2, 25,-63,-74,-57,38,12,-115,-15,-30,50,-108,-11,-2,10,-43,24, 4,-71,-48,-81,43,10,-109,-29,-68,62,-73,-22,-14,29,-4,2, 
  /* [31][0][][] */ 42,-5,-27,-19,-21,-52,16,91,-6,-48,64,4,2,-3,-20,16, 20,-25,33,64,-41,-45,21,63,6,-30,-14,6,12,18,-1,0, -6,-9,43,28,-45,-33,-11,127,59,-18,43,1,4,-4,-35,59, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant9_scale = { 32, { 0.0039306255057454109, 0.0034516996238380671, 0.0035158244427293539, 0.0030095549300312996, 0.0031343719456344843, 0.0030707190744578838, 0.0035404039081186056, 0.0027451887726783752, 0.0027560836169868708, 0.003127717413008213, 0.0029146338347345591, 0.0021790594328194857, 0.0032719636801630259, 0.0021140326280146837, 0.0024748728610575199, 0.0030219939071685076, 0.0029287051875144243, 0.0026361346244812012, 0.002480851486325264, 0.0017653349786996841, 0.0030922440346330404, 0.0034518223255872726, 0.0031435983255505562, 0.0032579724211245775, 0.0027648312970995903, 0.0026340258773416281, 0.0032212536316365004, 0.002214101143181324, 0.0019307072507217526, 0.003003736725077033, 0.0043814042583107948, 0.002301056869328022, } };
const TfArray<32, int> quant9_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 59, 18, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 59, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 59, 1, 16, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 30, 16, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 30, 32, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 30, 1, 32, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,59,18 } };
const TfArray<1, float> quant16_scale = { 1, { 0.040656760334968567, } };
const TfArray<1, int> quant16_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,59,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.045767966657876968, } };
const TfArray<1, int> quant17_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,59,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.045767966657876968, } };
const TfArray<1, int> quant18_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,59,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.024097172543406487, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,59,1,16 } };
const TfArray<1, float> quant20_scale = { 1, { 0.024097172543406487, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,30,1,16 } };
const TfArray<1, float> quant21_scale = { 1, { 0.024097172543406487, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,30,16 } };
const TfArray<1, float> quant22_scale = { 1, { 0.024097172543406487, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,30,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.097252964973449707, } };
const TfArray<1, int> quant23_zero = { 1, { 65 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,30,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.097252964973449707, } };
const TfArray<1, int> quant24_zero = { 1, { 65 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,30,32 } };
const TfArray<1, float> quant25_scale = { 1, { 0.023514797911047935, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,30,1,32 } };
const TfArray<1, float> quant26_scale = { 1, { 0.023514797911047935, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,15,1,32 } };
const TfArray<1, float> quant27_scale = { 1, { 0.023514797911047935, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,480 } };
const TfArray<1, float> quant28_scale = { 1, { 0.023514797911047935, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,11 } };
const TfArray<1, float> quant29_scale = { 1, { 0.12894651293754578, } };
const TfArray<1, int> quant29_zero = { 1, { 39 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,11 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1072, (TfLiteIntArray*)&tensor_dimension0, 1062, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 44, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 5280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 1062, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1072, (TfLiteIntArray*)&tensor_dimension17, 944, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 944, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 944, (TfLiteIntArray*)&tensor_dimension19, 944, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 944, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 944, (TfLiteIntArray*)&tensor_dimension21, 480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 960, (TfLiteIntArray*)&tensor_dimension23, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 960, (TfLiteIntArray*)&tensor_dimension25, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 960, (TfLiteIntArray*)&tensor_dimension27, 480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 480, (TfLiteIntArray*)&tensor_dimension29, 11, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 11, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
